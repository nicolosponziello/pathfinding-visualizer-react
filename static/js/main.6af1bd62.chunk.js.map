{"version":3,"sources":["constants.ts","components/Node/node_data.ts","components/Node/node.component.tsx","utils/index.ts","algorithms/common.ts","algorithms/index.ts","algorithms/heuristics.ts","algorithms/maze-generation/MazeGenerationAlgorithms.ts","components/Header/header.component.tsx","algorithms/maze-generation/tree-generator.ts","algorithms/maze-generation/dfs-generator.ts","algorithms/maze-generation/sidewinder-generator.ts","components/Grid/Grid.component.tsx","algorithms/dfs.ts","algorithms/dijkstra.ts","algorithms/bfs.ts","algorithms/astar.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GRID_WIDTH","window","innerWidth","GRID_HEIGHT","innerHeight","H_CELLS_NUM","Math","floor","V_CELLS_NUM","CellType","Node","props","cssClass","type","EMPTY","START","END","WALL","VISITED","SHORTEST_PATH","React","createElement","onMouseDown","mouseDown","onMouseEnter","mouseEnter","className","concat","style","width","height","randomInteger","min","max","random","gridDirections","r","c","getAdjNodes","grid","element","adj","Array","push","length","filter","n","compareNodes","a","b","ALGORITHMS","Euristic","calculateHeuristic","start","end","DIAGONAL","abs","diagonal","EUCLIDEAN","sqrt","pow","euclidean","MANHATTAN","manhattan","MazeGenAlgorithms","Header","_useState","useState","_useState2","_slicedToArray","wallNum","setWallNum","_useState3","BFS","_useState4","algoSelected","setAlgo","_useState5","_useState6","euristic","setEuristic","_useState7","BACKTRACKING","_useState8","mazeAlgo","setMazeAlgo","Fragment","value","onChange","ev","parseInt","target","onClick","randomWalls","defaultValue","Object","values","isNaN","map","key","generateMaze","onStart","disabled","ASTAR","e","resetAnimation","resetAll","_","require","directions","dfsMazeGenerator","visited","i","el","j","row","col","stack","current","undefined","pop","neighbours","forEach","dir","coord","neighbour","sample","_regeneratorRuntime","exports","Op","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","Grid","generateEmptyGrid","setGrid","startCoord","setStartCoord","endCoord","setEndCoord","isDraggingStart","setIsDraggingStart","_useState9","_useState10","isDraggingEnd","setIsDraggingEnd","_useState11","_useState12","isDraggingWall","setIsDraggingWall","_useState13","_useState14","isAnimating","setIsAnimating","_useState15","_useState16","algoTime","setAlgoTime","addEventListener","g","produce","copy","generateIMG","_ref","_asyncToGenerator","_callee","_context","html2canvas","document","querySelector","canvas","toBlob","link","href","URL","createObjectURL","download","body","appendChild","click","removeChild","console","log","apply","arguments","algo","res","orderOfVisit","shortestPath","startTime","Date","now","Number","DFS","parents","found","tmp","currentNode","_loop","some","adjs","_loop2","_i","iterativeDFS","DIJKSTRA","nodesToVisit","orderOfExamination","dist","tmp2","Infinity","sort","closest","shift","candidate","_i3","_neighbours","neighbor","dijkstra","queue","tmpDist","tmpVis","_step","_iterator","_createForOfIteratorHelper","s","f","openList","closedList","nodes","h","parent","neigbor","tentative_g_score","AStar","toAnimate","v","setTimeout","_ret","_ret2","animateResult","amount","randX","randY","SIDEWINDER","runSet","randomCell","sidewinderMazeGenerator","TREE","newRow","newCol","treeMazeGenerator","id","display","gridTemplateColumns","toFixed","version","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6af1bd62.chunk.js","sourcesContent":["export const SQUARE_WIDTH = 30;\r\nexport const SQUARE_HEIGHT = 30;\r\n\r\nexport const GRID_WIDTH = window.innerWidth * 0.9;\r\nexport const GRID_HEIGHT = window.innerHeight * 0.7;\r\n\r\nexport const H_CELLS_NUM = Math.floor(GRID_WIDTH / SQUARE_WIDTH);\r\nexport const V_CELLS_NUM = Math.floor(GRID_HEIGHT / SQUARE_HEIGHT);","export type GridNode = {\r\n  row: number;\r\n  col: number;\r\n  type: CellType;\r\n};\r\n\r\nexport enum CellType {\r\n  WALL,\r\n  EMPTY,\r\n  START,\r\n  END,\r\n  VISITED,\r\n  SHORTEST_PATH,\r\n}\r\n\r\nexport type Coordinate = {\r\n  r: number;\r\n  c: number;\r\n};\r\n\r\nexport type AlgorithmResult = {\r\n  orderOfVisit: Array<Coordinate>;\r\n  shortestPath: Array<Coordinate>;\r\n};","import React from \"react\";\r\nimport { SQUARE_WIDTH, SQUARE_HEIGHT } from \"../../constants\";\r\nimport \"./node.styles.css\";\r\nimport { CellType } from \"./node_data\";\r\ninterface Props {\r\n  row: number;\r\n  col: number;\r\n  type: CellType;\r\n  mouseDown: Function;\r\n  mouseEnter: Function;\r\n}\r\n\r\nconst Node = (props: Props) => {\r\n  var cssClass = \"\";\r\n  switch (props.type) {\r\n    case CellType.EMPTY:\r\n      cssClass = \"empty\";\r\n      break;\r\n    case CellType.START:\r\n      cssClass = \"start\";\r\n      break;\r\n    case CellType.END:\r\n      cssClass = \"end\";\r\n      break;\r\n    case CellType.WALL:\r\n      cssClass = \"wall\";\r\n      break;\r\n    case CellType.VISITED:\r\n      cssClass = \"visited\";\r\n      break;\r\n    case CellType.SHORTEST_PATH:\r\n      cssClass = \"shortestPath\";\r\n      break;\r\n  }\r\n  return (\r\n    <div\r\n      onMouseDown={() => props.mouseDown()}\r\n      onMouseEnter={() => props.mouseEnter()}\r\n      className={`node ${cssClass}`}\r\n      style={{\r\n        width: SQUARE_WIDTH,\r\n        height: SQUARE_HEIGHT,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","export function randomInteger(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport const gridDirections = [\r\n  { r: +1, c: 0 }, //bottom\r\n  { r: -1, c: 0 }, //top\r\n  { r: 0, c: -1 }, //left\r\n  { r: 0, c: +1 }, //right\r\n];","import { CellType, Coordinate, GridNode } from \"../components/Node/node_data\";\r\n\r\nexport function getAdjNodes(\r\n  grid: Array<Array<GridNode>>,\r\n  element: Coordinate\r\n): Array<Coordinate> {\r\n  var adj = Array<Coordinate>();\r\n\r\n  if (element.r > 0) adj.push({ r: element.r - 1, c: element.c });\r\n  if (element.r + 1 < grid.length) adj.push({ r: element.r + 1, c: element.c });\r\n  if (element.c > 0) adj.push({ r: element.r, c: element.c - 1 });\r\n  if (element.c + 1 < grid[0].length)\r\n    adj.push({ r: element.r, c: element.c + 1 });\r\n\r\n  return adj.filter((n) => grid[n.r][n.c].type != CellType.WALL);\r\n  //.sort(() => Math.random() - 0.5);\r\n}\r\n\r\n\r\nexport const compareNodes = (a: Coordinate, b: Coordinate): boolean => {\r\n  return a.r === b.r && a.c === b.c;\r\n};","export enum ALGORITHMS {\r\n  BFS,\r\n  DFS,\r\n  DIJKSTRA,\r\n  ASTAR,\r\n}\r\n","import { Coordinate } from \"../components/Node/node_data\";\r\n\r\nconst euclidean = (start: Coordinate, end: Coordinate): number => {\r\n  return Math.sqrt(Math.pow(end.r - start.r, 2) + Math.pow(end.c - start.c, 2));\r\n};\r\n\r\nconst diagonal = (start: Coordinate, end: Coordinate): number => {\r\n  return Math.max(Math.abs(start.r - end.r), Math.abs(start.c - end.c));\r\n};\r\n\r\nconst manhattan = (start: Coordinate, end: Coordinate): number => {\r\n  return Math.abs(start.r - end.r) + Math.abs(start.c - end.c);\r\n};\r\n\r\nexport enum Euristic {\r\n  MANHATTAN,\r\n  EUCLIDEAN,\r\n  DIAGONAL,\r\n}\r\n\r\nexport const calculateHeuristic = (\r\n  type: Euristic,\r\n  start: Coordinate,\r\n  end: Coordinate\r\n): number => {\r\n  switch (type) {\r\n    case Euristic.DIAGONAL:\r\n      return diagonal(start, end);\r\n    case Euristic.EUCLIDEAN:\r\n      return euclidean(start, end);\r\n    case Euristic.MANHATTAN:\r\n      return manhattan(start, end);\r\n  }\r\n};\r\n","export enum MazeGenAlgorithms {\r\n  BACKTRACKING,\r\n  TREE,\r\n  SIDEWINDER,\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { ALGORITHMS } from \"../../algorithms\";\r\nimport { Euristic } from \"../../algorithms/heuristics\";\r\nimport { MazeGenAlgorithms } from \"../../algorithms/maze-generation/MazeGenerationAlgorithms\";\r\nimport \"./header.styles.css\";\r\ninterface Props {\r\n  onStart: Function;\r\n  randomWalls: Function;\r\n  resetAnimation: () => void;\r\n  resetAll: () => void;\r\n  generateMaze: (algo: MazeGenAlgorithms) => void;\r\n  generateIMG: () => void;\r\n}\r\n\r\nconst Header = (props: Props) => {\r\n  const [wallNum, setWallNum] = useState(10);\r\n  const [algoSelected, setAlgo] = useState<ALGORITHMS>(ALGORITHMS.BFS);\r\n  const [euristic, setEuristic] = useState(Euristic.MANHATTAN);\r\n  const [mazeAlgo, setMazeAlgo] = useState(MazeGenAlgorithms.BACKTRACKING);\r\n  return (\r\n    <>\r\n      <div className=\"header-bar\">\r\n        <span className=\"app-name\">Algorithm Pathfinding</span>\r\n        <label>\r\n          <span className=\"selector-label\">Walls: </span>\r\n          <input\r\n            className=\"input\"\r\n            value={wallNum}\r\n            type=\"number\"\r\n            onChange={(ev) => setWallNum(parseInt(ev.target.value))}\r\n          />\r\n        </label>\r\n        <button className=\"button\" onClick={() => props.randomWalls(wallNum)}>\r\n          Generate Walls\r\n        </button>\r\n        <select\r\n          className=\"select\"\r\n          onChange={(ev: any) => setMazeAlgo(ev.target.value)}\r\n          defaultValue={MazeGenAlgorithms[0]}\r\n        >\r\n          {Object.values(MazeGenAlgorithms)\r\n            .filter((a: any) => !isNaN(a))\r\n            .map((a: any) => (\r\n              <option key={a} value={a}>\r\n                {MazeGenAlgorithms[a]}\r\n              </option>\r\n            ))}\r\n        </select>\r\n        <button className=\"button\" onClick={() => props.generateMaze(mazeAlgo)}>\r\n          Generate Maze\r\n        </button>\r\n        <button\r\n          className=\"button start-btn\"\r\n          onClick={() => props.onStart(algoSelected, euristic)}\r\n        >\r\n          START\r\n        </button>\r\n        <div>\r\n          <span className=\"selector-label\">Algorithm: </span>\r\n          <select\r\n            className=\"select\"\r\n            onChange={(ev: any) => setAlgo(ev.target.value)}\r\n            defaultValue={ALGORITHMS[0]}\r\n          >\r\n            {Object.values(ALGORITHMS)\r\n              .filter((a: any) => !isNaN(a))\r\n              .map((a: any) => (\r\n                <option key={a} value={a}>\r\n                  {ALGORITHMS[a]}\r\n                </option>\r\n              ))}\r\n          </select>\r\n\r\n          <select\r\n            defaultValue={Euristic.MANHATTAN}\r\n            disabled={algoSelected != ALGORITHMS.ASTAR}\r\n            className=\"select\"\r\n            onChange={(ev: any) => setEuristic(ev.target.value)}\r\n          >\r\n            {Object.values(Euristic)\r\n              .filter((e: any) => !isNaN(e))\r\n              .map((e: any) => (\r\n                <option key={e} value={e}>\r\n                  {Euristic[e]}\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n        <button className=\"button\" onClick={props.resetAnimation}>\r\n          Reset Animation\r\n        </button>\r\n        <button className=\"button\" onClick={props.resetAll}>\r\n          Reset All\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import {\r\n  CellType,\r\n  Coordinate,\r\n  GridNode,\r\n} from \"../../components/Node/node_data\";\r\nimport { V_CELLS_NUM, H_CELLS_NUM } from \"../../constants\";\r\nvar _ = require(\"lodash\");\r\n\r\nexport function treeMazeGenerator(\r\n  start: Coordinate,\r\n  end: Coordinate\r\n): Array<Array<GridNode>> {\r\n  //generate grid\r\n  var grid = Array<Array<GridNode>>();\r\n  for (var i = 0; i < V_CELLS_NUM; i++) {\r\n    var el = Array<GridNode>();\r\n    for (var j = 0; j < H_CELLS_NUM; j++) {\r\n      el.push({\r\n        row: i,\r\n        col: j,\r\n        type: CellType.WALL,\r\n      });\r\n    }\r\n    grid.push(el);\r\n  }\r\n\r\n  for (i = 0; i < V_CELLS_NUM; i++) {\r\n    for (j = 0; j < H_CELLS_NUM; j++) {\r\n      var dir = getRandomDirection();\r\n      //leave a border around the screen\r\n      var newRow = Math.floor(\r\n        Math.min(V_CELLS_NUM - 1, Math.max(i + dir.r, 1))\r\n      );\r\n      var newCol = Math.floor(\r\n        Math.min(H_CELLS_NUM - 1, Math.max(1, j + dir.c))\r\n      );\r\n      if (\r\n        grid[newRow][newCol] != undefined &&\r\n        grid[newRow][newCol].type != CellType.START &&\r\n        grid[newRow][newCol].type != CellType.END\r\n      ) {\r\n        grid[newRow][newCol].type = CellType.EMPTY;\r\n      }\r\n    }\r\n  }\r\n\r\n  grid[start.r][start.c].type = CellType.START;\r\n  grid[end.r][end.c].type = CellType.END;\r\n\r\n  return grid;\r\n}\r\n\r\nfunction getRandomDirection(): Coordinate {\r\n  return _.sample([\r\n    { r: +1, c: 0 },\r\n    { r: 0, c: +1 },\r\n  ]);\r\n}\r\n","import {\r\n  CellType,\r\n  Coordinate,\r\n  GridNode,\r\n} from \"../../components/Node/node_data\";\r\nimport { V_CELLS_NUM, H_CELLS_NUM } from \"../../constants\";\r\nvar _ = require(\"lodash\");\r\n\r\nvar directions: Array<Coordinate> = [\r\n  { r: +1, c: 0 },\r\n  { r: -1, c: 0 },\r\n  { r: 0, c: +1 },\r\n  { r: 0, c: -1 },\r\n];\r\n\r\n//start at start cell\r\n// generate all neighbours and mark them as visited\r\n// open a random passage\r\n// the open cell is then pushed on the stack\r\n\r\nexport function dfsMazeGenerator(\r\n  start: Coordinate,\r\n  end: Coordinate\r\n): Array<Array<GridNode>> {\r\n  //generate grid\r\n  var grid = Array<Array<GridNode>>();\r\n  var visited = Array<Array<boolean>>();\r\n  for (var i = 0; i < V_CELLS_NUM; i++) {\r\n    var el = Array<GridNode>();\r\n    var b = Array<boolean>();\r\n    for (var j = 0; j < H_CELLS_NUM; j++) {\r\n      el.push({\r\n        row: i,\r\n        col: j,\r\n        type: CellType.WALL,\r\n      });\r\n      b.push(false);\r\n    }\r\n    grid.push(el);\r\n    visited.push(b);\r\n  }\r\n  \r\n\r\n  var stack: Array<Coordinate> = [];\r\n  stack.push(start);\r\n  var current: Coordinate = start;\r\n  visited[current.r][current.c] = true;\r\n  while (stack.length > 0) {\r\n    current = stack.pop()!;\r\n\r\n    if (current === undefined) break;\r\n\r\n    //check neighbours\r\n    var neighbours: Array<Coordinate> = [];\r\n    directions.forEach((dir) => {\r\n      if (\r\n        check({ r: current.r + dir.r, c: current.c + dir.c })\r\n      ) {\r\n        if(!visited[current.r+dir.r][current.c+dir.c])\r\n          neighbours.push({ r: current.r + dir.r, c: current.c + dir.c });\r\n      }\r\n    });\r\n    //randomly open a neighbour and add it to the stack\r\n    if(neighbours.length > 0){\r\n      var neighbour: Coordinate = _.sample(neighbours);\r\n      grid[neighbour.r][neighbour.c].type = CellType.EMPTY;\r\n      grid[current.r][current.c].type = CellType.EMPTY;\r\n      neighbours.forEach(n => visited[n.r][n.c] = true);\r\n      neighbours.forEach(n => {\r\n        if (n != neighbour)\r\n          stack.push(n);\r\n      });\r\n      stack.push(neighbour);\r\n    }\r\n  }\r\n\r\n  grid[start.r][start.c].type = CellType.START;\r\n  grid[end.r][end.c].type = CellType.END;\r\n\r\n  return grid;\r\n}\r\n\r\nfunction check(coord: Coordinate): boolean {\r\n  return (\r\n    coord.r > 0 &&\r\n    coord.r < V_CELLS_NUM - 1 &&\r\n    coord.c > 0 &&\r\n    coord.c < H_CELLS_NUM - 1\r\n  );\r\n}","import {\r\n  CellType,\r\n  Coordinate,\r\n  GridNode,\r\n} from \"../../components/Node/node_data\";\r\nimport { V_CELLS_NUM, H_CELLS_NUM } from \"../../constants\";\r\nvar _ = require(\"lodash\");\r\n\r\nexport function sidewinderMazeGenerator(\r\n  start: Coordinate,\r\n  end: Coordinate\r\n): Array<Array<GridNode>> {\r\n  //generate grid\r\n  var grid = Array<Array<GridNode>>();\r\n  for (let i = 0; i < V_CELLS_NUM; i++) {\r\n    var el = Array<GridNode>();\r\n    for (let j = 0; j < H_CELLS_NUM; j++) {\r\n      el.push({\r\n        row: i,\r\n        col: j,\r\n        type: CellType.WALL,\r\n      });\r\n    }\r\n    grid.push(el);\r\n  }\r\n\r\n  //first row is always empty\r\n  for (let col = 0; col < H_CELLS_NUM; col++) {\r\n    grid[1][col].type = CellType.EMPTY;\r\n  }\r\n\r\n  for (let row = 2; row < V_CELLS_NUM; row += 2) {\r\n    var runSet = [];\r\n    for (let col = 1; col < H_CELLS_NUM; col += 2)  {\r\n      grid[row][col].type = CellType.EMPTY;\r\n      runSet.push({  r: row, c: col  });\r\n      let carveEast = Math.random() > 0.5;\r\n\r\n      if   (carveEast && col < H_CELLS_NUM -   2)   {\r\n        grid[row][col   +   1].type = CellType.EMPTY;\r\n      }   else   {\r\n        let randomCell = _.sample(runSet);\r\n        grid[randomCell.r -   1][randomCell.c].type = CellType.EMPTY;\r\n        runSet = [];\r\n      }\r\n    }\r\n  }\r\n\r\n  grid[start.r][start.c].type = CellType.START;\r\n  grid[end.r][end.c].type = CellType.END;\r\n\r\n  return grid;\r\n}\r\n\r\nfunction isStartOrEnd(\r\n  i: number,\r\n  j: number,\r\n  start: Coordinate,\r\n  end: Coordinate\r\n): boolean {\r\n  if (i == start.c && j == start.c) {\r\n    return true;\r\n  }\r\n  if (i == end.r && j == end.c) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction getRandomDirection(): Coordinate {\r\n  if (Math.random() >= 0.4) {\r\n    //north\r\n    return { r: +1, c: 0 };\r\n  } else {\r\n    //west\r\n    return { r: 0, c: +1 };\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { H_CELLS_NUM, SQUARE_WIDTH, V_CELLS_NUM } from \"../../constants\";\r\nimport Node from \"../Node/node.component\";\r\nimport { produce } from \"immer\";\r\nimport {\r\n  GridNode,\r\n  CellType,\r\n  Coordinate,\r\n  AlgorithmResult,\r\n} from \"../Node/node_data\";\r\nimport dijkstra from \"../../algorithms/dijkstra\";\r\nimport  {iterativeDFS} from \"../../algorithms/dfs\";\r\nimport { randomInteger } from \"../../utils\";\r\nimport BFS from \"../../algorithms/bfs\";\r\n\r\nimport \"./grid.style.css\";\r\nimport Header from \"../Header/header.component\";\r\nimport AStar from \"../../algorithms/astar\";\r\nimport { Euristic } from \"../../algorithms/heuristics\";\r\nimport { ALGORITHMS } from \"../../algorithms\";\r\nimport { treeMazeGenerator } from \"../../algorithms/maze-generation/tree-generator\";\r\nimport { dfsMazeGenerator } from \"../../algorithms/maze-generation/dfs-generator\";\r\nimport { sidewinderMazeGenerator } from \"../../algorithms/maze-generation/sidewinder-generator\";\r\nimport { MazeGenAlgorithms } from \"../../algorithms/maze-generation/MazeGenerationAlgorithms\";\r\n\r\n\r\nimport { version } from \"../../../package.json\";\r\nimport html2canvas from \"html2canvas\";\r\n\r\n\r\nconst generateEmptyGrid = () => {\r\n  var grid = Array<Array<GridNode>>();\r\n  for (var i = 0; i < V_CELLS_NUM; i++) {\r\n    var el = Array<GridNode>();\r\n    for (var j = 0; j < H_CELLS_NUM; j++) {\r\n      el.push({\r\n        row: i,\r\n        col: j,\r\n        type: CellType.EMPTY,\r\n      });\r\n    }\r\n    grid.push(el);\r\n  }\r\n  //set start and end\r\n  grid[5][5].type = CellType.START;\r\n  grid[grid.length - 5][grid[0].length - 5].type = CellType.END;\r\n  return grid;\r\n};\r\n\r\n\r\nexport const Grid = () => {\r\n  const [grid, setGrid] = useState(() => {\r\n    return generateEmptyGrid();\r\n  });\r\n  const [startCoord, setStartCoord] = useState({ r: 5, c: 5 });\r\n  const [endCoord, setEndCoord] = useState({\r\n    r: grid.length - 5,\r\n    c: grid[0].length - 5,\r\n  });\r\n  const [isDraggingStart, setIsDraggingStart] = useState(false);\r\n  const [isDraggingEnd, setIsDraggingEnd] = useState(false);\r\n  const [isDraggingWall, setIsDraggingWall] = useState(false);\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n  const [algoTime, setAlgoTime] = useState(0);\r\n\r\n  window.addEventListener('mouseup', () => {\r\n    setIsDraggingStart(false);\r\n    setIsDraggingEnd(false);\r\n    setIsDraggingWall(false);\r\n  }, false);\r\n\r\n  const resetAll = () => {\r\n    setGrid((g) => {\r\n      return produce(g, (copy) => {\r\n        for (var i = 0; i < copy.length; i++) {\r\n          for (var j = 0; j < copy[0].length; j++) {\r\n            if (\r\n              copy[i][j].type === CellType.SHORTEST_PATH ||\r\n              copy[i][j].type === CellType.VISITED ||\r\n              copy[i][j].type === CellType.WALL\r\n            )\r\n              copy[i][j].type = CellType.EMPTY;\r\n          }\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const animateResult = (res: AlgorithmResult) => {\r\n    setIsAnimating(true);\r\n    //animate visited\r\n    for (let i = 0; i < res.orderOfVisit.length; i++) {\r\n      let toAnimate = res.orderOfVisit[i];\r\n      if (!toAnimate) {\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        setGrid((g) => {\r\n          return produce(g, (copy) => {\r\n            if (\r\n              copy[toAnimate.r][toAnimate.c].type != CellType.END &&\r\n              copy[toAnimate.r][toAnimate.c].type != CellType.START\r\n            ) {\r\n              copy[toAnimate.r][toAnimate.c].type = CellType.VISITED;\r\n            }\r\n          });\r\n        });\r\n      }, 80);\r\n    }\r\n\r\n    //animate shortest path\r\n    for (let i = 0; i < res.shortestPath.length; i++) {\r\n      let toAnimate = res.shortestPath[i];\r\n      if (!toAnimate) return;\r\n      setTimeout(() => {\r\n        setGrid((g) => {\r\n          return produce(g, (copy) => {\r\n            if (\r\n              copy[toAnimate.r][toAnimate.c].type != CellType.END &&\r\n              copy[toAnimate.r][toAnimate.c].type != CellType.START\r\n            ) {\r\n              copy[toAnimate.r][toAnimate.c].type = CellType.SHORTEST_PATH;\r\n            }\r\n            //check if it is the last one\r\n            if (i == res.shortestPath.length - 1) {\r\n              setIsAnimating(false);\r\n            }\r\n          });\r\n        });\r\n      }, 80);\r\n    }\r\n  };\r\n\r\n  const start = (algo: ALGORITHMS, euristic: Euristic) => {\r\n    if (!isAnimating) {\r\n      resetAnimation();\r\n      var res: AlgorithmResult = { orderOfVisit: [], shortestPath: [] };\r\n      let startTime = Date.now();\r\n      switch (Number(algo)) {\r\n        case ALGORITHMS.DFS:\r\n          res = iterativeDFS(grid, startCoord, endCoord);\r\n          break;\r\n        case ALGORITHMS.DIJKSTRA:\r\n          res = dijkstra(grid, startCoord, endCoord);\r\n          break;\r\n        case ALGORITHMS.BFS:\r\n          res = BFS(grid, startCoord, endCoord);\r\n          break;\r\n        case ALGORITHMS.ASTAR:\r\n          res = AStar(grid, startCoord, endCoord, Number(euristic));\r\n      }\r\n      setAlgoTime(Date.now() - startTime);\r\n      animateResult(res);\r\n    }\r\n  };\r\n\r\n  const resetAnimation = () => {\r\n    setGrid((g) => {\r\n      return produce(g, (copy) => {\r\n        for (var i = 0; i < copy.length; i++) {\r\n          for (var j = 0; j < copy[0].length; j++) {\r\n            if (\r\n              copy[i][j].type === CellType.SHORTEST_PATH ||\r\n              copy[i][j].type === CellType.VISITED\r\n            )\r\n              copy[i][j].type = CellType.EMPTY;\r\n          }\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const generateMaze = (algo: MazeGenAlgorithms): void => {\r\n    setGrid((g) => {\r\n      switch   (Number(algo))   {\r\n        case MazeGenAlgorithms.BACKTRACKING:\r\n          return dfsMazeGenerator(startCoord, endCoord);\r\n        case MazeGenAlgorithms.SIDEWINDER:\r\n          return sidewinderMazeGenerator(startCoord, endCoord);\r\n        case MazeGenAlgorithms.TREE:\r\n          return treeMazeGenerator(startCoord, endCoord);\r\n        default:\r\n          return dfsMazeGenerator(startCoord, endCoord);\r\n      }\r\n    });\r\n  };\r\n\r\n  const addRandomWalls = (amount: number): void => {\r\n    setGrid((g) => {\r\n      return produce(g, (copy) => {\r\n        let randX, randY;\r\n        for (let i = 0; i < amount; i++) {\r\n          randX = randomInteger(0, grid.length - 1);\r\n          randY = randomInteger(0, grid[0].length - 1);\r\n          if(copy[randX][randY].type != CellType.START && copy[randX][randY].type != CellType.END)\r\n            copy[randX][randY].type = CellType.WALL;\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const generateIMG = async () => {\r\n    html2canvas(document.querySelector(\"#capture\")! as HTMLElement).then(\r\n      (canvas) => {\r\n        canvas.toBlob(\r\n          (b) => {\r\n              var link = document.createElement(\"a\");\r\n              link.href = URL.createObjectURL(b as Blob);\r\n              link.download = \"screenshot\";\r\n\r\n              //Firefox requires the link to be in the body\r\n              document.body.appendChild(link);\r\n    \r\n              //simulate click\r\n              link.click();\r\n    \r\n              //remove the link when done\r\n              document.body.removeChild(link);\r\n              console.log(\"download\");\r\n            },\r\n            \"image/jpeg\",\r\n            1\r\n          );\r\n         \r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        onStart={start}\r\n        resetAnimation={resetAnimation}\r\n        resetAll={resetAll}\r\n        randomWalls={addRandomWalls}\r\n        generateMaze={generateMaze}\r\n        generateIMG={generateIMG}\r\n      />\r\n      <span className=\"time-row\">\r\n        <p>Time: {algoTime}ms</p>\r\n      </span>\r\n      <div className=\"container\" id=\"capture\">\r\n        <div\r\n          className=\"grid\"\r\n          style={{\r\n            display: \"grid\",\r\n            gridTemplateColumns: `repeat(${H_CELLS_NUM.toFixed(\r\n              0\r\n            )}, ${SQUARE_WIDTH}px)`,\r\n          }}\r\n        >\r\n          {grid.map((row, i) => {\r\n            return row.map((col, j) => {\r\n              return (\r\n                <Node\r\n                  key={`${i}-${j}`}\r\n                  row={i}\r\n                  col={j}\r\n                  type={col.type}\r\n                  mouseDown={() => {\r\n                    if (!isAnimating) {\r\n                      if (col.type === CellType.START) {\r\n                        setIsDraggingStart(true);\r\n                      } else if (col.type == CellType.END) {\r\n                        setIsDraggingEnd(true);\r\n                      } else {\r\n                        setIsDraggingWall(true);\r\n                        setGrid((g) => {\r\n                          return produce(g, (copy) => {\r\n                            if (copy[i][j].type === CellType.EMPTY) {\r\n                              copy[i][j].type = CellType.WALL;\r\n                            } else if (copy[i][j].type === CellType.WALL) {\r\n                              copy[i][j].type = CellType.EMPTY;\r\n                            }\r\n                          });\r\n                        });\r\n                      }\r\n                    }\r\n                  }}\r\n                  mouseEnter={() => {\r\n                    if (!isAnimating) {\r\n                      if (isDraggingStart) {\r\n                        setGrid((g) => {\r\n                          return produce(g, (copy) => {\r\n                            copy[startCoord.r][startCoord.c].type =\r\n                              CellType.EMPTY;\r\n                            copy[i][j].type = CellType.START;\r\n                          });\r\n                        });\r\n                        setStartCoord({ r: i, c: j });\r\n                      } else if (isDraggingEnd) {\r\n                        setGrid((g) => {\r\n                          return produce(g, (copy) => {\r\n                            copy[endCoord.r][endCoord.c].type = CellType.EMPTY;\r\n                            copy[i][j].type = CellType.END;\r\n                          });\r\n                        });\r\n                        setEndCoord({ r: i, c: j });\r\n                      } else if (isDraggingWall) {\r\n                        setGrid((g) => {\r\n                          return produce(g, (copy) => {\r\n                            if (copy[i][j].type === CellType.EMPTY) {\r\n                              copy[i][j].type = CellType.WALL;\r\n                            } else if (copy[i][j].type === CellType.WALL) {\r\n                              copy[i][j].type = CellType.EMPTY;\r\n                            }\r\n                          });\r\n                        });\r\n                      }\r\n                    }\r\n                  }}\r\n                />\r\n              );\r\n            });\r\n          })}\r\n        </div>\r\n      </div>\r\n      <div className=\"version-row\">\r\n        <p>Version: {version}</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import {\r\n  GridNode,\r\n  Coordinate,\r\n  AlgorithmResult,\r\n  CellType,\r\n} from \"../components/Node/node_data\";\r\nimport { getAdjNodes } from \"./common\";\r\n\r\nexport function iterativeDFS(\r\n  grid: Array<Array<GridNode>>,\r\n  start: Coordinate,\r\n  end: Coordinate\r\n): AlgorithmResult {\r\n  var stack = Array<Coordinate>(); //stack of visited nodes\r\n  var visited = Array<Coordinate>();\r\n  var orderOfVisit = Array<Coordinate>();\r\n  var parents = Array<Array<Coordinate>>();\r\n  var found = false;\r\n\r\n  //init parents matrix\r\n  for (let i = 0; i < grid.length; i++) {\r\n    let tmp = Array<Coordinate>();\r\n    for (let j = 0; j < grid[0].length; j++) {\r\n      tmp.push({ r: -1, c: -1 });\r\n    }\r\n    parents.push(tmp);\r\n  }\r\n\r\n  var currentNode = { r: start.r, c: start.c };\r\n  stack.push(currentNode);\r\n  while (!found && stack.length) {\r\n    currentNode = stack.pop()!;\r\n    //if the node is not visited\r\n    orderOfVisit.push(currentNode);\r\n    if (!visited.some((n) => n.r === currentNode.r && n.c === currentNode.c)) {\r\n      visited.push(currentNode);\r\n    }\r\n    let adjs = getAdjNodes(grid, currentNode);\r\n    for (let i = 0; i < adjs.length; i++) {\r\n      if (!visited.some((n) => n.r === adjs[i].r && n.c === adjs[i].c)) {\r\n        parents[adjs[i].r][adjs[i].c] = currentNode;\r\n        stack.push(adjs[i]);\r\n      }\r\n    }\r\n    if (currentNode.r === end.r && currentNode.c === end.c) {\r\n      found = true;\r\n    }\r\n  }\r\n\r\n  if (!found) {\r\n    return {\r\n      orderOfVisit: orderOfVisit,\r\n      shortestPath: [],\r\n    };\r\n  }\r\n\r\n  var shortestPath = Array<Coordinate>();\r\n  //build shortest path array\r\n  currentNode = end;\r\n  while (currentNode.r != start.r || currentNode.c != start.c) {\r\n    shortestPath.push(currentNode);\r\n    currentNode = parents[currentNode.r][currentNode.c];\r\n  }\r\n  shortestPath.reverse();\r\n  return {\r\n    orderOfVisit: orderOfVisit,\r\n    shortestPath: shortestPath,\r\n  };\r\n}\r\n","import { AlgorithmResult, CellType, Coordinate, GridNode } from \"../components/Node/node_data\";\r\nimport { gridDirections } from \"../utils\";\r\n\r\nexport default function dijkstra(\r\n  grid: Array<Array<GridNode>>,\r\n  start: Coordinate,\r\n  end: Coordinate\r\n): AlgorithmResult {\r\n  var nodesToVisit = Array<Coordinate>();\r\n  var shortestPath = Array<Coordinate>();\r\n  var orderOfExamination = Array<Coordinate>();\r\n  var discoveredNodes = Array<Coordinate>();\r\n  var parents = Array<Array<Coordinate>>();\r\n  var dist = Array<Array<number>>();\r\n  var found = false;\r\n\r\n  //initialize dist matrix\r\n  for (var i = 0; i < grid.length; i++) {\r\n    var tmp = Array<number>();\r\n    var tmp2 = Array<Coordinate>();\r\n    for (var j = 0; j < grid[0].length; j++) {\r\n      tmp2.push({ r: -1, c: -1 });\r\n      tmp.push(Infinity);\r\n    }\r\n    parents.push(tmp2);\r\n    dist.push(tmp);\r\n  }\r\n  parents[start.r][start.c] = { r: 0, c: 0 };\r\n  dist[start.r][start.c] = 0;\r\n\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[0].length; j++) {\r\n      nodesToVisit.push({ r: grid[i][j].row, c: grid[i][j].col });\r\n    }\r\n  }\r\n\r\n  var currentNode: Coordinate = { r: start.r, c: start.c };\r\n  while (!found && nodesToVisit.length) {\r\n    //sort remaining nodes by distance\r\n    nodesToVisit.sort((a, b) => dist[a.r][a.c] - dist[b.r][b.c]);\r\n    const closest = nodesToVisit.shift();\r\n    if (!closest){\r\n      break;\r\n    }\r\n\r\n    //hit a wall\r\n    if (grid[closest.r][closest.c].type == CellType.WALL) {\r\n      continue;\r\n    }\r\n\r\n    //trapped\r\n    if (dist[closest.r][closest.c] === Infinity) {\r\n      return {\r\n        orderOfVisit: orderOfExamination,\r\n        shortestPath: [],\r\n      };\r\n    }\r\n\r\n    //all good\r\n    //register visit\r\n    orderOfExamination.push(closest);\r\n    //did we find the end?\r\n    if (closest.r === end.r && closest.c === end.c) {\r\n      found = true;\r\n    }\r\n\r\n    //get available neighbours\r\n    let neighbours = [];\r\n    for (let i = 0; i < gridDirections.length; i++) {\r\n      let candidate = {       \r\n        r: closest.r + gridDirections[i].r,\r\n        c: closest.c + gridDirections[i].c,\r\n      };\r\n      if(        \r\n        candidate.r >= 0 &&\r\n        candidate.r < grid.length &&\r\n        candidate.c >= 0 &&\r\n        candidate.c < grid[0].length &&\r\n        !orderOfExamination.some(n => n.r === candidate.r && n.c === candidate.c)) {\r\n          neighbours.push(candidate);\r\n      }\r\n    }\r\n\r\n    //iterate the neighbours\r\n    for (const neighbor of neighbours) {\r\n      dist[neighbor.r][neighbor.c] = dist[closest.r][closest.c] + 1;\r\n      parents[neighbor.r][neighbor.c] = closest;\r\n    }\r\n\r\n  }\r\n  //calculate shortest path from end to start\r\n  currentNode.c = end.c;\r\n  currentNode.r = end.r;\r\n  while       (currentNode.c != start.c || currentNode.r != start.r)       {\r\n    shortestPath.push(currentNode);\r\n    currentNode = parents[currentNode.r][currentNode.c];\r\n  }\r\n  shortestPath = shortestPath.reverse();\r\n  return {\r\n    orderOfVisit: orderOfExamination,\r\n    shortestPath: shortestPath,\r\n  };\r\n}","import {\r\n  AlgorithmResult,\r\n  Coordinate,\r\n  GridNode,\r\n} from \"../components/Node/node_data\";\r\nimport { getAdjNodes } from \"./common\";\r\n\r\nexport default function BFS(\r\n  grid: Array<Array<GridNode>>,\r\n  start: Coordinate,\r\n  end: Coordinate\r\n): AlgorithmResult {\r\n  var queue = Array<Coordinate>();\r\n  var orderOfVisit = Array<Coordinate>();\r\n  var dist = Array<Array<number>>();\r\n  var parents = Array<Array<Coordinate>>();\r\n  var visited = Array<Array<boolean>>();\r\n  var current;\r\n  var found = false;\r\n\r\n  for (let i = 0; i < grid.length; i++) {\r\n    let tmp = Array<Coordinate>();\r\n    let tmpDist = Array<number>();\r\n    let tmpVis = Array<boolean>();\r\n    for (let j = 0; j < grid[0].length; j++) {\r\n      tmp.push({ r: -1, c: -1 });\r\n      tmpDist.push(Infinity);\r\n      tmpVis.push(false);\r\n    }\r\n    parents.push(tmp);\r\n    dist.push(tmpDist);\r\n    visited.push(tmpVis);\r\n  }\r\n\r\n  dist[start.r][start.c] = 0;\r\n  visited[start.r][start.c] = true;\r\n  queue.push(start);\r\n\r\n  while (!found && queue.length) {\r\n    current = queue.shift()!;\r\n    visited[current.r][current.c] = true;\r\n    if (current.r === end.r && current.c === end.c) {\r\n      found = true;\r\n    }\r\n    orderOfVisit.push(current);\r\n    let neighbours = getAdjNodes(grid, current);\r\n    for (const neighbor of neighbours) {\r\n      //if not visited yet\r\n      if (!visited[neighbor.r][neighbor.c]) {\r\n        dist[neighbor.r][neighbor.c] = dist[current.r][current.c] + 1;\r\n        parents[neighbor.r][neighbor.c] = current;\r\n        visited[neighbor.r][neighbor.c] = true;\r\n        queue.push(neighbor);\r\n\r\n        if (neighbor.r === end.r && neighbor.c === end.c) {\r\n          found = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (!found) {\r\n    return {\r\n      orderOfVisit: orderOfVisit,\r\n      shortestPath: [],\r\n    };\r\n  }\r\n\r\n  current = end;\r\n  var shortestPath = Array<Coordinate>();\r\n  while (current.r != start.r || current.c != start.c) {\r\n    shortestPath.push(current);\r\n    current = parents[current.r][current.c];\r\n  }\r\n  shortestPath.reverse();\r\n  return {\r\n    orderOfVisit: orderOfVisit,\r\n    shortestPath: shortestPath,\r\n  };\r\n}\r\n","import {\r\n  AlgorithmResult,\r\n  Coordinate,\r\n  GridNode,\r\n} from \"../components/Node/node_data\";\r\nimport { calculateHeuristic, Euristic } from \"./heuristics\";\r\nimport { compareNodes, getAdjNodes } from \"./common\";\r\n\r\nexport default function AStar(\r\n  grid: Array<Array<GridNode>>,\r\n  start: Coordinate,\r\n  end: Coordinate,\r\n  euristic: Euristic\r\n): AlgorithmResult {\r\n  var orderOfVisit = Array<Coordinate>();\r\n  var openList = Array<Coordinate>();\r\n  var closedList = Array<Coordinate>();\r\n  var found = false;\r\n  let nodes = Array<Array<AStarNode>>();\r\n  let dist = Array<Array<number>>();\r\n\r\n  //init nodes matrix\r\n  for (let i = 0; i < grid.length; i++) {\r\n    let tmp = [];\r\n    let tmpDist = [];\r\n    for (let j = 0; j < grid[0].length; j++) {\r\n      tmpDist.push(Infinity);\r\n      tmp.push({\r\n        r: i,\r\n        c: j,\r\n        g: Infinity,\r\n        f: Infinity,\r\n        h: Infinity,\r\n        parent: null,\r\n      });\r\n    }\r\n    nodes.push(tmp);\r\n    dist.push(tmpDist);\r\n  }\r\n  \r\n  dist[start.r][start.c] = 0;\r\n\r\n  nodes[start.r][start.c].g = 0;\r\n  nodes[start.r][start.c].h = calculateHeuristic(euristic, start, end);\r\n  nodes[start.r][start.c].f = nodes[start.r][start.c].g + nodes[start.r][start.c].h;\r\n\r\n  openList.push(start);\r\n\r\n  while (!found && openList.length) {\r\n    //get the node with the lowest f score from the open list\r\n    openList.sort((a, b) => nodes[a.r][a.c].f - nodes[b.r][b.c].f);\r\n    let coord = openList.shift()!;\r\n    let current = nodes[coord.r][coord.c];\r\n    if(compareNodes(current, end)){\r\n      found = true;\r\n      break;\r\n    }\r\n    orderOfVisit.push({r: current.r, c: current.c});\r\n    closedList.push(current);\r\n\r\n    //analyze the neighbours\r\n    let adjs = getAdjNodes(grid, current);\r\n    for(const neigbor of adjs){\r\n      //check if is in the closed set\r\n      if(closedList.some(el => compareNodes(el, neigbor))){\r\n        continue;\r\n      }\r\n      let tentative_g_score = current.g + 1; // the dist between one node to the neighbor is always 1 since it is a grid\r\n      if(!openList.some(el => compareNodes(el, neigbor)) || tentative_g_score < nodes[neigbor.r][neigbor.c].g){\r\n        nodes[neigbor.r][neigbor.c].parent = current;\r\n        nodes[neigbor.r][neigbor.c].g = tentative_g_score;\r\n        nodes[neigbor.r][neigbor.c].f = nodes[neigbor.r][neigbor.c].g + calculateHeuristic(euristic, neigbor, end);\r\n        if(!openList.some(el => compareNodes(el, neigbor))){\r\n          openList.push(neigbor);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!found) {\r\n    return {\r\n      orderOfVisit: orderOfVisit,\r\n      shortestPath: [],\r\n    };\r\n  }\r\n  let current = end;\r\n  var shortestPath = Array<Coordinate>();\r\n  while (current.r != start.r || current.c != start.c) {\r\n    shortestPath.push(current);\r\n    current = nodes[current.r][current.c].parent!;\r\n  }\r\n  shortestPath.reverse();\r\n  return {\r\n    orderOfVisit: orderOfVisit,\r\n    shortestPath: shortestPath,\r\n  };\r\n}\r\n\r\ninterface AStarNode {\r\n  r: number;\r\n  c: number;\r\n  f: number;\r\n  g: number;\r\n  h: number;\r\n  parent: Coordinate | null;\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Grid } from \"./components/Grid/Grid.component\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Grid />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}