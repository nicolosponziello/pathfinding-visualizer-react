{"version":3,"sources":["components/Node/node_data.ts","constants.ts","components/Node/node.component.tsx","utils/index.ts","algorithms/common.ts","algorithms/index.ts","algorithms/astar-heuristics.ts","components/Header/header.component.tsx","algorithms/maze-generation/tree-generator.ts","components/Grid/Grid.component.tsx","algorithms/dfs.ts","algorithms/dijkstra.ts","algorithms/bfs.ts","algorithms/astar.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CellType","GRID_WIDTH","window","innerWidth","GRID_HEIGHT","innerHeight","H_CELLS_NUM","V_CELLS_NUM","Node","props","cssClass","type","EMPTY","START","END","WALL","VISITED","SHORTEST_PATH","onMouseDown","mouseDown","onMouseEnter","mouseEnter","className","style","width","height","randomInteger","min","max","Math","floor","random","gridDirections","r","c","getAdjNodes","grid","element","adj","Array","push","length","filter","n","compareNodes","a","b","ALGORITHMS","Euristic","calculateHeuristic","start","end","DIAGONAL","abs","diagonal","EUCLIDEAN","sqrt","pow","euclidean","MANHATTAN","manhattan","Header","useState","wallNum","setWallNum","BFS","algoSelected","setAlgo","euristic","setEuristic","value","onChange","ev","parseInt","target","onClick","randomWalls","generateMaze","onStart","defaultValue","Object","values","isNaN","map","disabled","ASTAR","e","resetAnimation","resetAll","_","require","Grid","i","el","j","row","col","generateEmptyGrid","setGrid","startCoord","setStartCoord","endCoord","setEndCoord","isDraggingStart","setIsDraggingStart","isDraggingEnd","setIsDraggingEnd","isDraggingWall","setIsDraggingWall","isAnimating","setIsAnimating","addEventListener","g","produce","copy","algo","res","orderOfVisit","shortestPath","Number","DFS","stack","visited","parents","found","tmp","currentNode","pop","some","adjs","reverse","iterativeDFS","DIJKSTRA","nodesToVisit","orderOfExamination","dist","tmp2","Infinity","sort","closest","shift","neighbours","candidate","neighbor","dijkstra","current","queue","tmpDist","tmpVis","console","log","openList","closedList","nodes","f","h","parent","coord","neigbor","tentative_g_score","AStar","toAnimate","setTimeout","animateResult","amount","randX","randY","dir","sample","newRow","newCol","undefined","treeMazeGenerator","display","gridTemplateColumns","toFixed","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0158b16.chunk.js","sourcesContent":["export type GridNode = {\n  row: number;\n  col: number;\n  type: CellType;\n};\n\nexport enum CellType {\n  WALL,\n  EMPTY,\n  START,\n  END,\n  VISITED,\n  SHORTEST_PATH,\n}\n\nexport type Coordinate = {\n  r: number;\n  c: number;\n};\n\nexport type AlgorithmResult = {\n  orderOfVisit: Array<Coordinate>;\n  shortestPath: Array<Coordinate>;\n};","export const SQUARE_WIDTH = 30;\nexport const SQUARE_HEIGHT = 30;\n\nexport const GRID_WIDTH = window.innerWidth * 0.9;\nexport const GRID_HEIGHT = window.innerHeight * 0.7;\n\nexport const H_CELLS_NUM = GRID_WIDTH / SQUARE_WIDTH;\nexport const V_CELLS_NUM = GRID_HEIGHT / SQUARE_HEIGHT;\n","import React from \"react\";\nimport { SQUARE_WIDTH, SQUARE_HEIGHT } from \"../../constants\";\nimport \"./node.styles.css\";\nimport { CellType } from \"./node_data\";\ninterface Props {\n  row: number;\n  col: number;\n  type: CellType;\n  mouseDown: Function;\n  mouseEnter: Function;\n}\n\nconst Node = (props: Props) => {\n  var cssClass = \"\";\n  switch (props.type) {\n    case CellType.EMPTY:\n      cssClass = \"empty\";\n      break;\n    case CellType.START:\n      cssClass = \"start\";\n      break;\n    case CellType.END:\n      cssClass = \"end\";\n      break;\n    case CellType.WALL:\n      cssClass = \"wall\";\n      break;\n    case CellType.VISITED:\n      cssClass = \"visited\";\n      break;\n    case CellType.SHORTEST_PATH:\n      cssClass = \"shortestPath\";\n      break;\n  }\n  return (\n    <div\n      onMouseDown={() => props.mouseDown()}\n      onMouseEnter={() => props.mouseEnter()}\n      className={`node ${cssClass}`}\n      style={{\n        width: SQUARE_WIDTH,\n        height: SQUARE_HEIGHT,\n      }}\n    />\n  );\n};\n\nexport default Node;\n","export function randomInteger(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function randomEnum<T>(en: T): T[keyof T] {\n  let values = (Object.keys(en)\n    .map((n) => Number.parseInt(n))\n    .filter((n) => !Number.isNaN(n)) as unknown) as T[keyof T][];\n  let randomIndex = randomInteger(0, values.length);\n  return values[randomIndex];\n}\n\nexport const gridDirections = [\n  { r: +1, c: 0 }, //bottom\n  { r: -1, c: 0 }, //top\n  { r: 0, c: -1 }, //left\n  { r: 0, c: +1 }, //right\n];","import { CellType, Coordinate, GridNode } from \"../components/Node/node_data\";\n\nexport function getAdjNodes(\n  grid: Array<Array<GridNode>>,\n  element: Coordinate\n): Array<Coordinate> {\n  var adj = Array<Coordinate>();\n\n  if (element.r > 0) adj.push({ r: element.r - 1, c: element.c });\n  if (element.r + 1 < grid.length) adj.push({ r: element.r + 1, c: element.c });\n  if (element.c > 0) adj.push({ r: element.r, c: element.c - 1 });\n  if (element.c + 1 < grid[0].length)\n    adj.push({ r: element.r, c: element.c + 1 });\n\n  return adj.filter((n) => grid[n.r][n.c].type != CellType.WALL);\n  //.sort(() => Math.random() - 0.5);\n}\n\n\nexport const compareNodes = (a: Coordinate, b: Coordinate): boolean => {\n  return a.r === b.r && a.c === b.c;\n};","export enum ALGORITHMS {\n  BFS,\n  DFS,\n  DIJKSTRA,\n  ASTAR,\n}\n","import { Coordinate } from \"../components/Node/node_data\";\n\nconst euclidean = (start: Coordinate, end: Coordinate): number => {\n  return Math.sqrt(Math.pow(end.r - start.r, 2) + Math.pow(end.c - start.c, 2));\n};\n\nconst diagonal = (start: Coordinate, end: Coordinate): number => {\n  return Math.max(Math.abs(start.r - end.r), Math.abs(start.c - end.c));\n};\n\nconst manhattan = (start: Coordinate, end: Coordinate): number => {\n  return Math.abs(start.r - end.r) + Math.abs(start.c - end.c);\n};\n\nexport enum Euristic {\n  MANHATTAN,\n  EUCLIDEAN,\n  DIAGONAL,\n}\n\nexport const calculateHeuristic = (\n  type: Euristic,\n  start: Coordinate,\n  end: Coordinate\n): number => {\n  switch (type) {\n    case Euristic.DIAGONAL:\n      return diagonal(start, end);\n    case Euristic.EUCLIDEAN:\n      return euclidean(start, end);\n    case Euristic.MANHATTAN:\n      return manhattan(start, end);\n  }\n};\n","import React, { useState } from \"react\";\nimport { ALGORITHMS } from \"../../algorithms\";\nimport { Euristic } from \"../../algorithms/astar-heuristics\";\nimport \"./header.styles.css\";\ninterface Props {\n  onStart: Function;\n  randomWalls: Function;\n  resetAnimation: () => void;\n  resetAll: () => void;\n  generateMaze: () => void;\n}\n\nconst Header = (props: Props) => {\n  const [wallNum, setWallNum] = useState(10);\n  const [algoSelected, setAlgo] = useState<ALGORITHMS>(ALGORITHMS.BFS);\n  const [euristic, setEuristic] = useState(Euristic.MANHATTAN);\n  return (\n    <>\n      <div className=\"header-bar\">\n        <span className=\"app-name\">Algorithm Pathfinding</span>\n        <label>\n          <span className=\"selector-label\">Walls: </span>\n          <input\n            className=\"input\"\n            value={wallNum}\n            type=\"number\"\n            onChange={(ev) => setWallNum(parseInt(ev.target.value))}\n          />\n        </label>\n        <button className=\"button\" onClick={() => props.randomWalls(wallNum)}>\n          Generate Walls\n        </button>\n        <button className=\"button\" onClick={props.generateMaze}>\n          Generate Maze\n        </button>\n        <button\n          className=\"button start-btn\"\n          onClick={() => props.onStart(algoSelected, euristic)}\n        >\n          START\n        </button>\n        <div>\n          <span className=\"selector-label\">Algorithm: </span>\n          <select\n            className=\"select\"\n            onChange={(ev: any) => setAlgo(ev.target.value)}\n            defaultValue={ALGORITHMS[0]}\n          >\n            {Object.values(ALGORITHMS)\n              .filter((a: any) => !isNaN(a))\n              .map((a: any) => (\n                <option key={a} value={a}>\n                  {ALGORITHMS[a]}\n                </option>\n              ))}\n          </select>\n\n          <select\n            defaultValue={Euristic.MANHATTAN}\n            disabled={algoSelected != ALGORITHMS.ASTAR}\n            className=\"select\"\n            onChange={(ev: any) => setEuristic(ev.target.value)}\n          >\n            {Object.values(Euristic)\n              .filter((e: any) => !isNaN(e))\n              .map((e: any) => (\n                <option key={e} value={e}>\n                  {Euristic[e]}\n                </option>\n              ))}\n          </select>\n        </div>\n        <button className=\"button\" onClick={props.resetAnimation}>\n          Reset Animation\n        </button>\n        <button className=\"button\" onClick={props.resetAll}>\n          Reset All\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default Header;\n","import {\n  CellType,\n  Coordinate,\n  GridNode,\n} from \"../../components/Node/node_data\";\nimport { V_CELLS_NUM, H_CELLS_NUM } from \"../../constants\";\nvar _ = require(\"lodash\");\n\nexport function treeMazeGenerator(\n  start: Coordinate,\n  end: Coordinate\n): Array<Array<GridNode>> {\n  //generate grid\n  var grid = Array<Array<GridNode>>();\n  for (var i = 0; i < V_CELLS_NUM; i++) {\n    var el = Array<GridNode>();\n    for (var j = 0; j < H_CELLS_NUM; j++) {\n      el.push({\n        row: i,\n        col: j,\n        type: CellType.WALL,\n      });\n    }\n    grid.push(el);\n  }\n  grid[start.r][start.c].type = CellType.START;\n  grid[grid.length - 5][grid[0].length - 5].type = CellType.END;\n\n  for (i = 0; i < V_CELLS_NUM; i++) {\n    for (j = 0; j < H_CELLS_NUM; j++) {\n      var dir = getRandomDirection();\n      console.log(dir);\n      //leave a border around the screen\n      var newRow = Math.floor(\n        Math.min(V_CELLS_NUM - 1, Math.max(i + dir.r, 1))\n      );\n      var newCol = Math.floor(\n        Math.min(H_CELLS_NUM - 1, Math.max(1, j + dir.c))\n      );\n      if (\n        grid[newRow][newCol] != undefined &&\n        grid[newRow][newCol].type != CellType.START &&\n        grid[newRow][newCol].type != CellType.END\n      ) {\n        grid[newRow][newCol].type = CellType.EMPTY;\n      }\n    }\n  }\n\n  return grid;\n}\n\nfunction getRandomDirection(): Coordinate {\n  return _.sample([\n    { r: +1, c: 0 },\n    { r: 0, c: +1 },\n  ]);\n}\n","import React, { useState } from \"react\";\nimport { H_CELLS_NUM, SQUARE_WIDTH, V_CELLS_NUM } from \"../../constants\";\nimport Node from \"../Node/node.component\";\nimport { produce } from \"immer\";\nimport {\n  GridNode,\n  CellType,\n  Coordinate,\n  AlgorithmResult,\n} from \"../Node/node_data\";\nimport dijkstra from \"../../algorithms/dijkstra\";\nimport  {iterativeDFS} from \"../../algorithms/dfs\";\nimport { randomInteger } from \"../../utils\";\nimport BFS from \"../../algorithms/bfs\";\n\nimport \"./grid.style.css\";\nimport Header from \"../Header/header.component\";\nimport AStar from \"../../algorithms/astar\";\nimport { Euristic } from \"../../algorithms/astar-heuristics\";\nimport { ALGORITHMS } from \"../../algorithms\";\nimport { treeMazeGenerator } from \"../../algorithms/maze-generation/tree-generator\";\nimport { dfsMazeGenerator } from \"../../algorithms/maze-generation/dfs-generator\";\nimport { sidewinderMazeGenerator } from \"../../algorithms/maze-generation/sidewinder-generator\";\n\n\nconst generateEmptyGrid = () => {\n  var grid = Array<Array<GridNode>>();\n  for (var i = 0; i < V_CELLS_NUM; i++) {\n    var el = Array<GridNode>();\n    for (var j = 0; j < H_CELLS_NUM; j++) {\n      el.push({\n        row: i,\n        col: j,\n        type: CellType.EMPTY,\n      });\n    }\n    grid.push(el);\n  }\n  //set start and end\n  grid[5][5].type = CellType.START;\n  grid[grid.length - 5][grid[0].length - 5].type = CellType.END;\n  return grid;\n};\n\n\nexport const Grid = () => {\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n  const [startCoord, setStartCoord] = useState({ r: 5, c: 5 });\n  const [endCoord, setEndCoord] = useState({\n    r: grid.length - 5,\n    c: grid[0].length - 5,\n  });\n  const [isDraggingStart, setIsDraggingStart] = useState(false);\n  const [isDraggingEnd, setIsDraggingEnd] = useState(false);\n  const [isDraggingWall, setIsDraggingWall] = useState(false);\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  window.addEventListener('mouseup', () => {\n    setIsDraggingStart(false);\n    setIsDraggingEnd(false);\n    setIsDraggingWall(false);\n  }, false);\n\n  const resetAll = () => {\n    setGrid((g) => {\n      return produce(g, (copy) => {\n        for (var i = 0; i < copy.length; i++) {\n          for (var j = 0; j < copy[0].length; j++) {\n            if (\n              copy[i][j].type === CellType.SHORTEST_PATH ||\n              copy[i][j].type === CellType.VISITED ||\n              copy[i][j].type === CellType.WALL\n            )\n              copy[i][j].type = CellType.EMPTY;\n          }\n        }\n      });\n    });\n  };\n\n  const animateResult = (res: AlgorithmResult) => {\n    //animate visited\n    for (let i = 0; i < res.orderOfVisit.length; i++) {\n      let toAnimate = res.orderOfVisit[i];\n      if (!toAnimate) {\n        return;\n      }\n      setTimeout(() => {\n        setGrid((g) => {\n          return produce(g, (copy) => {\n            if (\n              copy[toAnimate.r][toAnimate.c].type != CellType.END &&\n              copy[toAnimate.r][toAnimate.c].type != CellType.START\n            ) {\n              copy[toAnimate.r][toAnimate.c].type = CellType.VISITED;\n            }\n          });\n        });\n      }, 100);\n    }\n\n    //animate shortest path\n    for (let i = 0; i < res.shortestPath.length; i++) {\n      let toAnimate = res.shortestPath[i];\n      if (!toAnimate) return;\n      setTimeout(() => {\n        setGrid((g) => {\n          return produce(g, (copy) => {\n            if (\n              copy[toAnimate.r][toAnimate.c].type != CellType.END &&\n              copy[toAnimate.r][toAnimate.c].type != CellType.START\n            ) {\n              copy[toAnimate.r][toAnimate.c].type = CellType.SHORTEST_PATH;\n            }\n          });\n        });\n      }, 100);\n    }\n  };\n\n  const start = (algo: ALGORITHMS, euristic: Euristic) => {\n    resetAnimation();\n    setIsAnimating(true);\n    var res: AlgorithmResult = { orderOfVisit: [], shortestPath: [] };\n    switch (Number(algo)) {\n      case ALGORITHMS.DFS:\n        res = iterativeDFS(grid, startCoord, endCoord);\n        break;\n      case ALGORITHMS.DIJKSTRA:\n        res = dijkstra(grid, startCoord, endCoord);\n        break;\n      case ALGORITHMS.BFS:\n        res = BFS(grid, startCoord, endCoord);\n        break;\n      case ALGORITHMS.ASTAR:\n        res = AStar(grid, startCoord, endCoord, Number(euristic));\n    }\n    animateResult(res);\n    setIsAnimating(false);\n  };\n\n  const resetAnimation = () => {\n    setGrid((g) => {\n      return produce(g, (copy) => {\n        for (var i = 0; i < copy.length; i++) {\n          for (var j = 0; j < copy[0].length; j++) {\n            if (\n              copy[i][j].type === CellType.SHORTEST_PATH ||\n              copy[i][j].type === CellType.VISITED\n            )\n              copy[i][j].type = CellType.EMPTY;\n          }\n        }\n      });\n    });\n  };\n\n  const generateMaze = (): void => {\n    setGrid((g) => {\n      return treeMazeGenerator(startCoord, endCoord);\n    });\n  };\n\n  const addRandomWalls = (amount: number): void => {\n    setGrid((g) => {\n      return produce(g, (copy) => {\n        let randX, randY;\n        for (let i = 0; i < amount; i++) {\n          do {\n            randX = randomInteger(0, grid.length - 1);\n            randY = randomInteger(0, grid[0].length - 1);\n          } while (copy[randX][randY].type != CellType.EMPTY);\n          copy[randX][randY].type = CellType.WALL;\n        }\n      });\n    });\n  };\n\n  return (\n    <>\n      <Header\n        onStart={start}\n        resetAnimation={resetAnimation}\n        resetAll={resetAll}\n        randomWalls={addRandomWalls}\n        generateMaze={generateMaze}\n      />\n\n      <div className=\"container\">\n        <div\n          className=\"grid\"\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${H_CELLS_NUM.toFixed(\n              0\n            )}, ${SQUARE_WIDTH}px)`,\n          }}\n        >\n          {grid.map((row, i) => {\n            return row.map((col, j) => {\n              return (\n                <Node\n                  key={`${i}-${j}`}\n                  row={i}\n                  col={j}\n                  type={col.type}\n                  mouseDown={() => {\n                    if (!isAnimating) {\n                      if (col.type === CellType.START) {\n                        setIsDraggingStart(true);\n                      } else if (col.type == CellType.END) {\n                        setIsDraggingEnd(true);\n                      } else {\n                        setIsDraggingWall(true);\n                        setGrid((g) => {\n                          return produce(g, (copy) => {\n                            if (copy[i][j].type === CellType.EMPTY) {\n                              copy[i][j].type = CellType.WALL;\n                            } else if (copy[i][j].type === CellType.WALL) {\n                              copy[i][j].type = CellType.EMPTY;\n                            }\n                          });\n                        });\n                      }\n                    }\n                  }}\n                  mouseEnter={() => {\n                    if (!isAnimating) {\n                      if (isDraggingStart) {\n                        setGrid((g) => {\n                          return produce(g, (copy) => {\n                            copy[startCoord.r][startCoord.c].type =\n                              CellType.EMPTY;\n                            copy[i][j].type = CellType.START;\n                          });\n                        });\n                        setStartCoord({ r: i, c: j });\n                      } else if (isDraggingEnd) {\n                        setGrid((g) => {\n                          return produce(g, (copy) => {\n                            copy[endCoord.r][endCoord.c].type = CellType.EMPTY;\n                            copy[i][j].type = CellType.END;\n                          });\n                        });\n                        setEndCoord({ r: i, c: j });\n                      } else if (isDraggingWall) {\n                        setGrid((g) => {\n                          return produce(g, (copy) => {\n                            if (copy[i][j].type === CellType.EMPTY) {\n                              copy[i][j].type = CellType.WALL;\n                            } else if (copy[i][j].type === CellType.WALL) {\n                              copy[i][j].type = CellType.EMPTY;\n                            }\n                          });\n                        });\n                      }\n                    }\n                  }}\n                />\n              );\n            });\n          })}\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  GridNode,\n  Coordinate,\n  AlgorithmResult,\n  CellType,\n} from \"../components/Node/node_data\";\nimport { getAdjNodes } from \"./common\";\n\nexport function iterativeDFS(\n  grid: Array<Array<GridNode>>,\n  start: Coordinate,\n  end: Coordinate\n): AlgorithmResult {\n  var stack = Array<Coordinate>(); //stack of visited nodes\n  var visited = Array<Coordinate>();\n  var orderOfVisit = Array<Coordinate>();\n  var parents = Array<Array<Coordinate>>();\n  var found = false;\n\n  //init parents matrix\n  for (let i = 0; i < grid.length; i++) {\n    let tmp = Array<Coordinate>();\n    for (let j = 0; j < grid[0].length; j++) {\n      tmp.push({ r: -1, c: -1 });\n    }\n    parents.push(tmp);\n  }\n\n  var currentNode = { r: start.r, c: start.c };\n  stack.push(currentNode);\n  while (!found && stack.length) {\n    currentNode = stack.pop()!;\n    //if the node is not visited\n    orderOfVisit.push(currentNode);\n    if (!visited.some((n) => n.r === currentNode.r && n.c === currentNode.c)) {\n      visited.push(currentNode);\n    }\n    let adjs = getAdjNodes(grid, currentNode);\n    for (let i = 0; i < adjs.length; i++) {\n      if (!visited.some((n) => n.r === adjs[i].r && n.c === adjs[i].c)) {\n        parents[adjs[i].r][adjs[i].c] = currentNode;\n        stack.push(adjs[i]);\n      }\n    }\n    if (currentNode.r === end.r && currentNode.c === end.c) {\n      found = true;\n    }\n  }\n\n  if (!found) {\n    return {\n      orderOfVisit: orderOfVisit,\n      shortestPath: [],\n    };\n  }\n\n  var shortestPath = Array<Coordinate>();\n  //build shortest path array\n  currentNode = end;\n  while (currentNode.r != start.r || currentNode.c != start.c) {\n    shortestPath.push(currentNode);\n    currentNode = parents[currentNode.r][currentNode.c];\n  }\n  shortestPath.reverse();\n  return {\n    orderOfVisit: orderOfVisit,\n    shortestPath: shortestPath,\n  };\n}\n","import { AlgorithmResult, CellType, Coordinate, GridNode } from \"../components/Node/node_data\";\nimport { gridDirections } from \"../utils\";\n\nexport default function dijkstra(\n  grid: Array<Array<GridNode>>,\n  start: Coordinate,\n  end: Coordinate\n): AlgorithmResult {\n  var nodesToVisit = Array<Coordinate>();\n  var shortestPath = Array<Coordinate>();\n  var orderOfExamination = Array<Coordinate>();\n  var discoveredNodes = Array<Coordinate>();\n  var parents = Array<Array<Coordinate>>();\n  var dist = Array<Array<number>>();\n  var found = false;\n\n  //initialize dist matrix\n  for (var i = 0; i < grid.length; i++) {\n    var tmp = Array<number>();\n    var tmp2 = Array<Coordinate>();\n    for (var j = 0; j < grid[0].length; j++) {\n      tmp2.push({ r: -1, c: -1 });\n      tmp.push(Infinity);\n    }\n    parents.push(tmp2);\n    dist.push(tmp);\n  }\n  parents[start.r][start.c] = { r: 0, c: 0 };\n  dist[start.r][start.c] = 0;\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      nodesToVisit.push({ r: grid[i][j].row, c: grid[i][j].col });\n    }\n  }\n\n  var currentNode: Coordinate = { r: start.r, c: start.c };\n  while (!found && nodesToVisit.length) {\n    //sort remaining nodes by distance\n    nodesToVisit.sort((a, b) => dist[a.r][a.c] - dist[b.r][b.c]);\n    const closest = nodesToVisit.shift()!;\n\n    //hit a wall\n    if (grid[closest?.r][closest?.c].type === CellType.WALL) {\n      continue;\n    }\n\n    //trapped\n    if (dist[closest.r][closest.c] === Infinity) {\n      return {\n        orderOfVisit: orderOfExamination,\n        shortestPath: [],\n      };\n    }\n\n    //all good\n    //register visit\n    orderOfExamination.push(closest);\n    //did we find the end?\n    if (closest.r === end.r && closest.c === end.c) {\n      found = true;\n    }\n\n    //get available neighbours\n    let neighbours = [];\n    for (let i = 0; i < gridDirections.length; i++) {\n      let candidate = {       \n        r: closest.r + gridDirections[i].r,\n        c: closest.c + gridDirections[i].c,\n      };\n      if(        \n        candidate.r >= 0 &&\n        candidate.r < grid.length &&\n        candidate.c >= 0 &&\n        candidate.c < grid[0].length &&\n        !orderOfExamination.some(n => n.r === candidate.r && n.c === candidate.c)) {\n          neighbours.push(candidate);\n      }\n    }\n\n    //iterate the neighbours\n    for (const neighbor of neighbours) {\n      dist[neighbor.r][neighbor.c] = dist[closest.r][closest.c] + 1;\n      parents[neighbor.r][neighbor.c] = closest;\n    }\n\n  }\n  //calculate shortest path from end to start\n  currentNode.c = end.c;\n  currentNode.r = end.r;\n  while       (currentNode.c != start.c || currentNode.r != start.r)       {\n    shortestPath.push(currentNode);\n    currentNode = parents[currentNode.r][currentNode.c];\n  }\n  shortestPath = shortestPath.reverse();\n  return {\n    orderOfVisit: orderOfExamination,\n    shortestPath: shortestPath,\n  };\n}","import {\n  AlgorithmResult,\n  Coordinate,\n  GridNode,\n} from \"../components/Node/node_data\";\nimport { getAdjNodes } from \"./common\";\n\nexport default function BFS(\n  grid: Array<Array<GridNode>>,\n  start: Coordinate,\n  end: Coordinate\n): AlgorithmResult {\n  var queue = Array<Coordinate>();\n  var orderOfVisit = Array<Coordinate>();\n  var dist = Array<Array<number>>();\n  var parents = Array<Array<Coordinate>>();\n  var visited = Array<Array<boolean>>();\n  var current;\n  var found = false;\n\n  for (let i = 0; i < grid.length; i++) {\n    let tmp = Array<Coordinate>();\n    let tmpDist = Array<number>();\n    let tmpVis = Array<boolean>();\n    for (let j = 0; j < grid[0].length; j++) {\n      tmp.push({ r: -1, c: -1 });\n      tmpDist.push(Infinity);\n      tmpVis.push(false);\n    }\n    parents.push(tmp);\n    dist.push(tmpDist);\n    visited.push(tmpVis);\n  }\n\n  dist[start.r][start.c] = 0;\n  visited[start.r][start.c] = true;\n  queue.push(start);\n\n  while (!found && queue.length) {\n    current = queue.shift()!;\n    visited[current.r][current.c] = true;\n    if (current.r === end.r && current.c === end.c) {\n      found = true;\n    }\n    orderOfVisit.push(current);\n    let neighbours = getAdjNodes(grid, current);\n    for (const neighbor of neighbours) {\n      //if not visited yet\n      if (!visited[neighbor.r][neighbor.c]) {\n        dist[neighbor.r][neighbor.c] = dist[current.r][current.c] + 1;\n        parents[neighbor.r][neighbor.c] = current;\n        visited[neighbor.r][neighbor.c] = true;\n        queue.push(neighbor);\n\n        if (neighbor.r === end.r && neighbor.c === end.c) {\n          found = true;\n        }\n      }\n    }\n  }\n  if (!found) {\n    return {\n      orderOfVisit: orderOfVisit,\n      shortestPath: [],\n    };\n  }\n\n  current = end;\n  var shortestPath = Array<Coordinate>();\n  while (current.r != start.r || current.c != start.c) {\n    shortestPath.push(current);\n    current = parents[current.r][current.c];\n  }\n  shortestPath.reverse();\n  console.log(\"bfs completed\");\n  return {\n    orderOfVisit: orderOfVisit,\n    shortestPath: shortestPath,\n  };\n}\n","import {\n  AlgorithmResult,\n  Coordinate,\n  GridNode,\n} from \"../components/Node/node_data\";\nimport { calculateHeuristic, Euristic } from \"./astar-heuristics\";\nimport { compareNodes, getAdjNodes } from \"./common\";\n\nexport default function AStar(\n  grid: Array<Array<GridNode>>,\n  start: Coordinate,\n  end: Coordinate,\n  euristic: Euristic\n): AlgorithmResult {\n  var orderOfVisit = Array<Coordinate>();\n  var openList = Array<Coordinate>();\n  var closedList = Array<Coordinate>();\n  var found = false;\n  let nodes = Array<Array<AStarNode>>();\n  let dist = Array<Array<number>>();\n\n  //init nodes matrix\n  for (let i = 0; i < grid.length; i++) {\n    let tmp = [];\n    let tmpDist = [];\n    for (let j = 0; j < grid[0].length; j++) {\n      tmpDist.push(Infinity);\n      tmp.push({\n        r: i,\n        c: j,\n        g: Infinity,\n        f: Infinity,\n        h: Infinity,\n        parent: null,\n      });\n    }\n    nodes.push(tmp);\n    dist.push(tmpDist);\n  }\n  \n  dist[start.r][start.c] = 0;\n\n  nodes[start.r][start.c].g = 0;\n  nodes[start.r][start.c].h = calculateHeuristic(euristic, start, end);\n  nodes[start.r][start.c].f = nodes[start.r][start.c].g + nodes[start.r][start.c].h;\n\n  openList.push(start);\n\n  while (!found && openList.length) {\n    //get the node with the lowest f score from the open list\n    openList.sort((a, b) => nodes[a.r][a.c].f - nodes[b.r][b.c].f);\n    let coord = openList.shift()!;\n    let current = nodes[coord.r][coord.c];\n    if(compareNodes(current, end)){\n      found = true;\n      break;\n    }\n    orderOfVisit.push({r: current.r, c: current.c});\n    closedList.push(current);\n\n    //analyze the neighbours\n    let adjs = getAdjNodes(grid, current);\n    for(const neigbor of adjs){\n      //check if is in the closed set\n      if(closedList.some(el => compareNodes(el, neigbor))){\n        continue;\n      }\n      let tentative_g_score = current.g + 1; // the dist between one node to the neighbor is always 1 since it is a grid\n      if(!openList.some(el => compareNodes(el, neigbor)) || tentative_g_score < nodes[neigbor.r][neigbor.c].g){\n        nodes[neigbor.r][neigbor.c].parent = current;\n        nodes[neigbor.r][neigbor.c].g = tentative_g_score;\n        nodes[neigbor.r][neigbor.c].f = nodes[neigbor.r][neigbor.c].g + calculateHeuristic(euristic, neigbor, end);\n        if(!openList.some(el => compareNodes(el, neigbor))){\n          openList.push(neigbor);\n        }\n      }\n    }\n  }\n\n  if (!found) {\n    return {\n      orderOfVisit: orderOfVisit,\n      shortestPath: [],\n    };\n  }\n  let current = end;\n  var shortestPath = Array<Coordinate>();\n  while (current.r != start.r || current.c != start.c) {\n    shortestPath.push(current);\n    current = nodes[current.r][current.c].parent!;\n  }\n  shortestPath.reverse();\n  return {\n    orderOfVisit: orderOfVisit,\n    shortestPath: shortestPath,\n  };\n}\n\ninterface AStarNode {\n  r: number;\n  c: number;\n  f: number;\n  g: number;\n  h: number;\n  parent: Coordinate | null;\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Grid } from \"./components/Grid/Grid.component\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}