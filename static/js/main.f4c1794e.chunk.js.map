{"version":3,"sources":["components/Node/node_data.ts","constants.ts","components/Node/node.component.tsx","utils/index.ts","algorithms/common.ts","algorithms/index.ts","algorithms/heuristics.ts","algorithms/maze-generation/MazeGenerationAlgorithms.ts","components/Header/header.component.tsx","algorithms/maze-generation/tree-generator.ts","algorithms/maze-generation/dfs-generator.ts","algorithms/maze-generation/sidewinder-generator.ts","components/Grid/Grid.component.tsx","algorithms/dfs.ts","algorithms/dijkstra.ts","algorithms/bfs.ts","algorithms/astar.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CellType","GRID_WIDTH","window","innerWidth","GRID_HEIGHT","innerHeight","H_CELLS_NUM","V_CELLS_NUM","Node","props","cssClass","type","EMPTY","START","END","WALL","VISITED","SHORTEST_PATH","onMouseDown","mouseDown","onMouseEnter","mouseEnter","className","style","width","height","randomInteger","min","max","Math","floor","random","gridDirections","r","c","getAdjNodes","grid","element","adj","Array","push","length","filter","n","compareNodes","a","b","ALGORITHMS","Euristic","MazeGenAlgorithms","calculateHeuristic","start","end","DIAGONAL","abs","diagonal","EUCLIDEAN","sqrt","pow","euclidean","MANHATTAN","manhattan","Header","useState","wallNum","setWallNum","BFS","algoSelected","setAlgo","euristic","setEuristic","BACKTRACKING","mazeAlgo","setMazeAlgo","value","onChange","ev","parseInt","target","onClick","randomWalls","defaultValue","Object","values","isNaN","map","generateMaze","onStart","disabled","ASTAR","e","resetAnimation","resetAll","_","require","directions","dfsMazeGenerator","visited","i","el","j","row","col","stack","current","undefined","pop","neighbours","forEach","dir","coord","neighbour","sample","Grid","generateEmptyGrid","setGrid","startCoord","setStartCoord","endCoord","setEndCoord","isDraggingStart","setIsDraggingStart","isDraggingEnd","setIsDraggingEnd","isDraggingWall","setIsDraggingWall","isAnimating","setIsAnimating","algoTime","setAlgoTime","addEventListener","g","produce","copy","generateIMG","html2canvas","document","querySelector","then","canvas","toBlob","link","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","console","log","algo","res","orderOfVisit","shortestPath","startTime","Date","now","Number","DFS","parents","found","tmp","currentNode","some","adjs","reverse","iterativeDFS","DIJKSTRA","nodesToVisit","orderOfExamination","dist","tmp2","Infinity","sort","closest","shift","candidate","neighbor","dijkstra","queue","tmpDist","tmpVis","openList","closedList","nodes","f","h","parent","neigbor","tentative_g_score","AStar","toAnimate","setTimeout","animateResult","amount","randX","randY","SIDEWINDER","runSet","randomCell","sidewinderMazeGenerator","TREE","newRow","newCol","treeMazeGenerator","id","display","gridTemplateColumns","toFixed","version","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f4c1794e.chunk.js","sourcesContent":["export type GridNode = {\n  row: number;\n  col: number;\n  type: CellType;\n};\n\nexport enum CellType {\n  WALL,\n  EMPTY,\n  START,\n  END,\n  VISITED,\n  SHORTEST_PATH,\n}\n\nexport type Coordinate = {\n  r: number;\n  c: number;\n};\n\nexport type AlgorithmResult = {\n  orderOfVisit: Array<Coordinate>;\n  shortestPath: Array<Coordinate>;\n};","export const SQUARE_WIDTH = 30;\nexport const SQUARE_HEIGHT = 30;\n\nexport const GRID_WIDTH = window.innerWidth * 0.9;\nexport const GRID_HEIGHT = window.innerHeight * 0.7;\n\nexport const H_CELLS_NUM = GRID_WIDTH / SQUARE_WIDTH;\nexport const V_CELLS_NUM = GRID_HEIGHT / SQUARE_HEIGHT;\n","import React from \"react\";\nimport { SQUARE_WIDTH, SQUARE_HEIGHT } from \"../../constants\";\nimport \"./node.styles.css\";\nimport { CellType } from \"./node_data\";\ninterface Props {\n  row: number;\n  col: number;\n  type: CellType;\n  mouseDown: Function;\n  mouseEnter: Function;\n}\n\nconst Node = (props: Props) => {\n  var cssClass = \"\";\n  switch (props.type) {\n    case CellType.EMPTY:\n      cssClass = \"empty\";\n      break;\n    case CellType.START:\n      cssClass = \"start\";\n      break;\n    case CellType.END:\n      cssClass = \"end\";\n      break;\n    case CellType.WALL:\n      cssClass = \"wall\";\n      break;\n    case CellType.VISITED:\n      cssClass = \"visited\";\n      break;\n    case CellType.SHORTEST_PATH:\n      cssClass = \"shortestPath\";\n      break;\n  }\n  return (\n    <div\n      onMouseDown={() => props.mouseDown()}\n      onMouseEnter={() => props.mouseEnter()}\n      className={`node ${cssClass}`}\n      style={{\n        width: SQUARE_WIDTH,\n        height: SQUARE_HEIGHT,\n      }}\n    />\n  );\n};\n\nexport default Node;\n","export function randomInteger(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function randomEnum<T>(en: T): T[keyof T] {\n  let values = (Object.keys(en)\n    .map((n) => Number.parseInt(n))\n    .filter((n) => !Number.isNaN(n)) as unknown) as T[keyof T][];\n  let randomIndex = randomInteger(0, values.length);\n  return values[randomIndex];\n}\n\nexport const gridDirections = [\n  { r: +1, c: 0 }, //bottom\n  { r: -1, c: 0 }, //top\n  { r: 0, c: -1 }, //left\n  { r: 0, c: +1 }, //right\n];","import { CellType, Coordinate, GridNode } from \"../components/Node/node_data\";\n\nexport function getAdjNodes(\n  grid: Array<Array<GridNode>>,\n  element: Coordinate\n): Array<Coordinate> {\n  var adj = Array<Coordinate>();\n\n  if (element.r > 0) adj.push({ r: element.r - 1, c: element.c });\n  if (element.r + 1 < grid.length) adj.push({ r: element.r + 1, c: element.c });\n  if (element.c > 0) adj.push({ r: element.r, c: element.c - 1 });\n  if (element.c + 1 < grid[0].length)\n    adj.push({ r: element.r, c: element.c + 1 });\n\n  return adj.filter((n) => grid[n.r][n.c].type != CellType.WALL);\n  //.sort(() => Math.random() - 0.5);\n}\n\n\nexport const compareNodes = (a: Coordinate, b: Coordinate): boolean => {\n  return a.r === b.r && a.c === b.c;\n};","export enum ALGORITHMS {\n  BFS,\n  DFS,\n  DIJKSTRA,\n  ASTAR,\n}\n","import { Coordinate } from \"../components/Node/node_data\";\n\nconst euclidean = (start: Coordinate, end: Coordinate): number => {\n  return Math.sqrt(Math.pow(end.r - start.r, 2) + Math.pow(end.c - start.c, 2));\n};\n\nconst diagonal = (start: Coordinate, end: Coordinate): number => {\n  return Math.max(Math.abs(start.r - end.r), Math.abs(start.c - end.c));\n};\n\nconst manhattan = (start: Coordinate, end: Coordinate): number => {\n  return Math.abs(start.r - end.r) + Math.abs(start.c - end.c);\n};\n\nexport enum Euristic {\n  MANHATTAN,\n  EUCLIDEAN,\n  DIAGONAL,\n}\n\nexport const calculateHeuristic = (\n  type: Euristic,\n  start: Coordinate,\n  end: Coordinate\n): number => {\n  switch (type) {\n    case Euristic.DIAGONAL:\n      return diagonal(start, end);\n    case Euristic.EUCLIDEAN:\n      return euclidean(start, end);\n    case Euristic.MANHATTAN:\n      return manhattan(start, end);\n  }\n};\n","export enum MazeGenAlgorithms {\n  BACKTRACKING,\n  TREE,\n  SIDEWINDER,\n}\n","import React, { useState } from \"react\";\nimport { ALGORITHMS } from \"../../algorithms\";\nimport { Euristic } from \"../../algorithms/heuristics\";\nimport { MazeGenAlgorithms } from \"../../algorithms/maze-generation/MazeGenerationAlgorithms\";\nimport \"./header.styles.css\";\ninterface Props {\n  onStart: Function;\n  randomWalls: Function;\n  resetAnimation: () => void;\n  resetAll: () => void;\n  generateMaze: (algo: MazeGenAlgorithms) => void;\n  generateIMG: () => void;\n}\n\nconst Header = (props: Props) => {\n  const [wallNum, setWallNum] = useState(10);\n  const [algoSelected, setAlgo] = useState<ALGORITHMS>(ALGORITHMS.BFS);\n  const [euristic, setEuristic] = useState(Euristic.MANHATTAN);\n  const [mazeAlgo, setMazeAlgo] = useState(MazeGenAlgorithms.BACKTRACKING);\n  return (\n    <>\n      <div className=\"header-bar\">\n        <span className=\"app-name\">Algorithm Pathfinding</span>\n        <label>\n          <span className=\"selector-label\">Walls: </span>\n          <input\n            className=\"input\"\n            value={wallNum}\n            type=\"number\"\n            onChange={(ev) => setWallNum(parseInt(ev.target.value))}\n          />\n        </label>\n        <button className=\"button\" onClick={() => props.randomWalls(wallNum)}>\n          Generate Walls\n        </button>\n        <select\n          className=\"select\"\n          onChange={(ev: any) => setMazeAlgo(ev.target.value)}\n          defaultValue={MazeGenAlgorithms[0]}\n        >\n          {Object.values(MazeGenAlgorithms)\n            .filter((a: any) => !isNaN(a))\n            .map((a: any) => (\n              <option key={a} value={a}>\n                {MazeGenAlgorithms[a]}\n              </option>\n            ))}\n        </select>\n        <button className=\"button\" onClick={() => props.generateMaze(mazeAlgo)}>\n          Generate Maze\n        </button>\n        <button\n          className=\"button start-btn\"\n          onClick={() => props.onStart(algoSelected, euristic)}\n        >\n          START\n        </button>\n        <div>\n          <span className=\"selector-label\">Algorithm: </span>\n          <select\n            className=\"select\"\n            onChange={(ev: any) => setAlgo(ev.target.value)}\n            defaultValue={ALGORITHMS[0]}\n          >\n            {Object.values(ALGORITHMS)\n              .filter((a: any) => !isNaN(a))\n              .map((a: any) => (\n                <option key={a} value={a}>\n                  {ALGORITHMS[a]}\n                </option>\n              ))}\n          </select>\n\n          <select\n            defaultValue={Euristic.MANHATTAN}\n            disabled={algoSelected != ALGORITHMS.ASTAR}\n            className=\"select\"\n            onChange={(ev: any) => setEuristic(ev.target.value)}\n          >\n            {Object.values(Euristic)\n              .filter((e: any) => !isNaN(e))\n              .map((e: any) => (\n                <option key={e} value={e}>\n                  {Euristic[e]}\n                </option>\n              ))}\n          </select>\n        </div>\n        <button className=\"button\" onClick={props.resetAnimation}>\n          Reset Animation\n        </button>\n        <button className=\"button\" onClick={props.resetAll}>\n          Reset All\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default Header;\n","import {\n  CellType,\n  Coordinate,\n  GridNode,\n} from \"../../components/Node/node_data\";\nimport { V_CELLS_NUM, H_CELLS_NUM } from \"../../constants\";\nvar _ = require(\"lodash\");\n\nexport function treeMazeGenerator(\n  start: Coordinate,\n  end: Coordinate\n): Array<Array<GridNode>> {\n  //generate grid\n  var grid = Array<Array<GridNode>>();\n  for (var i = 0; i < V_CELLS_NUM; i++) {\n    var el = Array<GridNode>();\n    for (var j = 0; j < H_CELLS_NUM; j++) {\n      el.push({\n        row: i,\n        col: j,\n        type: CellType.WALL,\n      });\n    }\n    grid.push(el);\n  }\n\n  for (i = 0; i < V_CELLS_NUM; i++) {\n    for (j = 0; j < H_CELLS_NUM; j++) {\n      var dir = getRandomDirection();\n      //leave a border around the screen\n      var newRow = Math.floor(\n        Math.min(V_CELLS_NUM - 1, Math.max(i + dir.r, 1))\n      );\n      var newCol = Math.floor(\n        Math.min(H_CELLS_NUM - 1, Math.max(1, j + dir.c))\n      );\n      if (\n        grid[newRow][newCol] != undefined &&\n        grid[newRow][newCol].type != CellType.START &&\n        grid[newRow][newCol].type != CellType.END\n      ) {\n        grid[newRow][newCol].type = CellType.EMPTY;\n      }\n    }\n  }\n\n  grid[start.r][start.c].type = CellType.START;\n  grid[end.r][end.c].type = CellType.END;\n\n  return grid;\n}\n\nfunction getRandomDirection(): Coordinate {\n  return _.sample([\n    { r: +1, c: 0 },\n    { r: 0, c: +1 },\n  ]);\n}\n","import {\n  CellType,\n  Coordinate,\n  GridNode,\n} from \"../../components/Node/node_data\";\nimport { V_CELLS_NUM, H_CELLS_NUM } from \"../../constants\";\nvar _ = require(\"lodash\");\n\nvar directions: Array<Coordinate> = [\n  { r: +1, c: 0 },\n  { r: -1, c: 0 },\n  { r: 0, c: +1 },\n  { r: 0, c: -1 },\n];\n\n//start at start cell\n// generate all neighbours and mark them as visited\n// open a random passage\n// the open cell is then pushed on the stack\n\nexport function dfsMazeGenerator(\n  start: Coordinate,\n  end: Coordinate\n): Array<Array<GridNode>> {\n  //generate grid\n  var grid = Array<Array<GridNode>>();\n  var visited = Array<Array<boolean>>();\n  for (var i = 0; i < V_CELLS_NUM; i++) {\n    var el = Array<GridNode>();\n    var b = Array<boolean>();\n    for (var j = 0; j < H_CELLS_NUM; j++) {\n      el.push({\n        row: i,\n        col: j,\n        type: CellType.WALL,\n      });\n      b.push(false);\n    }\n    grid.push(el);\n    visited.push(b);\n  }\n  \n\n  var stack: Array<Coordinate> = [];\n  stack.push(start);\n  var current: Coordinate = start;\n  visited[current.r][current.c] = true;\n  while (stack.length > 0) {\n    current = stack.pop()!;\n\n    if (current === undefined) break;\n\n    //check neighbours\n    var neighbours: Array<Coordinate> = [];\n    directions.forEach((dir) => {\n      if (\n        check({ r: current.r + dir.r, c: current.c + dir.c })\n      ) {\n        if(!visited[current.r+dir.r][current.c+dir.c])\n          neighbours.push({ r: current.r + dir.r, c: current.c + dir.c });\n      }\n    });\n    //randomly open a neighbour and add it to the stack\n    if(neighbours.length > 0){\n      var neighbour: Coordinate = _.sample(neighbours);\n      grid[neighbour.r][neighbour.c].type = CellType.EMPTY;\n      grid[current.r][current.c].type = CellType.EMPTY;\n      neighbours.forEach(n => visited[n.r][n.c] = true);\n      neighbours.forEach(n => {\n        if (n != neighbour)\n          stack.push(n);\n      });\n      stack.push(neighbour);\n    }\n  }\n\n  grid[start.r][start.c].type = CellType.START;\n  grid[end.r][end.c].type = CellType.END;\n\n  return grid;\n}\n\nfunction check(coord: Coordinate): boolean {\n  return (\n    coord.r > 0 &&\n    coord.r < V_CELLS_NUM - 1 &&\n    coord.c > 0 &&\n    coord.c < H_CELLS_NUM - 1\n  );\n}","import {\n  CellType,\n  Coordinate,\n  GridNode,\n} from \"../../components/Node/node_data\";\nimport { V_CELLS_NUM, H_CELLS_NUM } from \"../../constants\";\nvar _ = require(\"lodash\");\n\nexport function sidewinderMazeGenerator(\n  start: Coordinate,\n  end: Coordinate\n): Array<Array<GridNode>> {\n  //generate grid\n  var grid = Array<Array<GridNode>>();\n  for (let i = 0; i < V_CELLS_NUM; i++) {\n    var el = Array<GridNode>();\n    for (let j = 0; j < H_CELLS_NUM; j++) {\n      el.push({\n        row: i,\n        col: j,\n        type: CellType.WALL,\n      });\n    }\n    grid.push(el);\n  }\n\n  //first row is always empty\n  for (let col = 0; col < H_CELLS_NUM; col++) {\n    grid[1][col].type = CellType.EMPTY;\n  }\n\n  for (let row = 2; row < V_CELLS_NUM; row += 2) {\n    var runSet = [];\n    for (let col = 1; col < H_CELLS_NUM; col += 2)  {\n      grid[row][col].type = CellType.EMPTY;\n      runSet.push({  r: row, c: col  });\n      let carveEast = Math.random() > 0.5;\n\n      if   (carveEast && col < H_CELLS_NUM -   2)   {\n        grid[row][col   +   1].type = CellType.EMPTY;\n      }   else   {\n        let randomCell = _.sample(runSet);\n        grid[randomCell.r -   1][randomCell.c].type = CellType.EMPTY;\n        runSet = [];\n      }\n    }\n  }\n\n  grid[start.r][start.c].type = CellType.START;\n  grid[end.r][end.c].type = CellType.END;\n\n  return grid;\n}\n\nfunction isStartOrEnd(\n  i: number,\n  j: number,\n  start: Coordinate,\n  end: Coordinate\n): boolean {\n  if (i == start.c && j == start.c) {\n    return true;\n  }\n  if (i == end.r && j == end.c) {\n    return true;\n  }\n  return false;\n}\n\nfunction getRandomDirection(): Coordinate {\n  if (Math.random() >= 0.4) {\n    //north\n    return { r: +1, c: 0 };\n  } else {\n    //west\n    return { r: 0, c: +1 };\n  }\n}\n","import React, { useState } from \"react\";\nimport { H_CELLS_NUM, SQUARE_WIDTH, V_CELLS_NUM } from \"../../constants\";\nimport Node from \"../Node/node.component\";\nimport { produce } from \"immer\";\nimport {\n  GridNode,\n  CellType,\n  Coordinate,\n  AlgorithmResult,\n} from \"../Node/node_data\";\nimport dijkstra from \"../../algorithms/dijkstra\";\nimport  {iterativeDFS} from \"../../algorithms/dfs\";\nimport { randomInteger } from \"../../utils\";\nimport BFS from \"../../algorithms/bfs\";\n\nimport \"./grid.style.css\";\nimport Header from \"../Header/header.component\";\nimport AStar from \"../../algorithms/astar\";\nimport { Euristic } from \"../../algorithms/heuristics\";\nimport { ALGORITHMS } from \"../../algorithms\";\nimport { treeMazeGenerator } from \"../../algorithms/maze-generation/tree-generator\";\nimport { dfsMazeGenerator } from \"../../algorithms/maze-generation/dfs-generator\";\nimport { sidewinderMazeGenerator } from \"../../algorithms/maze-generation/sidewinder-generator\";\nimport { MazeGenAlgorithms } from \"../../algorithms/maze-generation/MazeGenerationAlgorithms\";\n\n\nimport { version } from \"../../../package.json\";\nimport html2canvas from \"html2canvas\";\n\n\nconst generateEmptyGrid = () => {\n  var grid = Array<Array<GridNode>>();\n  for (var i = 0; i < V_CELLS_NUM; i++) {\n    var el = Array<GridNode>();\n    for (var j = 0; j < H_CELLS_NUM; j++) {\n      el.push({\n        row: i,\n        col: j,\n        type: CellType.EMPTY,\n      });\n    }\n    grid.push(el);\n  }\n  //set start and end\n  grid[5][5].type = CellType.START;\n  grid[grid.length - 5][grid[0].length - 5].type = CellType.END;\n  return grid;\n};\n\n\nexport const Grid = () => {\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n  const [startCoord, setStartCoord] = useState({ r: 5, c: 5 });\n  const [endCoord, setEndCoord] = useState({\n    r: grid.length - 5,\n    c: grid[0].length - 5,\n  });\n  const [isDraggingStart, setIsDraggingStart] = useState(false);\n  const [isDraggingEnd, setIsDraggingEnd] = useState(false);\n  const [isDraggingWall, setIsDraggingWall] = useState(false);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [algoTime, setAlgoTime] = useState(0);\n\n  window.addEventListener('mouseup', () => {\n    setIsDraggingStart(false);\n    setIsDraggingEnd(false);\n    setIsDraggingWall(false);\n  }, false);\n\n  const resetAll = () => {\n    setGrid((g) => {\n      return produce(g, (copy) => {\n        for (var i = 0; i < copy.length; i++) {\n          for (var j = 0; j < copy[0].length; j++) {\n            if (\n              copy[i][j].type === CellType.SHORTEST_PATH ||\n              copy[i][j].type === CellType.VISITED ||\n              copy[i][j].type === CellType.WALL\n            )\n              copy[i][j].type = CellType.EMPTY;\n          }\n        }\n      });\n    });\n  };\n\n  const animateResult = (res: AlgorithmResult) => {\n    setIsAnimating(true);\n    //animate visited\n    for (let i = 0; i < res.orderOfVisit.length; i++) {\n      let toAnimate = res.orderOfVisit[i];\n      if (!toAnimate) {\n        return;\n      }\n      setTimeout(() => {\n        setGrid((g) => {\n          return produce(g, (copy) => {\n            if (\n              copy[toAnimate.r][toAnimate.c].type != CellType.END &&\n              copy[toAnimate.r][toAnimate.c].type != CellType.START\n            ) {\n              copy[toAnimate.r][toAnimate.c].type = CellType.VISITED;\n            }\n          });\n        });\n      }, 80);\n    }\n\n    //animate shortest path\n    for (let i = 0; i < res.shortestPath.length; i++) {\n      let toAnimate = res.shortestPath[i];\n      if (!toAnimate) return;\n      setTimeout(() => {\n        setGrid((g) => {\n          return produce(g, (copy) => {\n            if (\n              copy[toAnimate.r][toAnimate.c].type != CellType.END &&\n              copy[toAnimate.r][toAnimate.c].type != CellType.START\n            ) {\n              copy[toAnimate.r][toAnimate.c].type = CellType.SHORTEST_PATH;\n            }\n            //check if it is the last one\n            if (i == res.shortestPath.length - 1) {\n              setIsAnimating(false);\n            }\n          });\n        });\n      }, 80);\n    }\n  };\n\n  const start = (algo: ALGORITHMS, euristic: Euristic) => {\n    if (!isAnimating) {\n      resetAnimation();\n      var res: AlgorithmResult = { orderOfVisit: [], shortestPath: [] };\n      let startTime = Date.now();\n      switch (Number(algo)) {\n        case ALGORITHMS.DFS:\n          res = iterativeDFS(grid, startCoord, endCoord);\n          break;\n        case ALGORITHMS.DIJKSTRA:\n          res = dijkstra(grid, startCoord, endCoord);\n          break;\n        case ALGORITHMS.BFS:\n          res = BFS(grid, startCoord, endCoord);\n          break;\n        case ALGORITHMS.ASTAR:\n          res = AStar(grid, startCoord, endCoord, Number(euristic));\n      }\n      setAlgoTime(Date.now() - startTime);\n      animateResult(res);\n    }\n  };\n\n  const resetAnimation = () => {\n    setGrid((g) => {\n      return produce(g, (copy) => {\n        for (var i = 0; i < copy.length; i++) {\n          for (var j = 0; j < copy[0].length; j++) {\n            if (\n              copy[i][j].type === CellType.SHORTEST_PATH ||\n              copy[i][j].type === CellType.VISITED\n            )\n              copy[i][j].type = CellType.EMPTY;\n          }\n        }\n      });\n    });\n  };\n\n  const generateMaze = (algo: MazeGenAlgorithms): void => {\n    setGrid((g) => {\n      switch   (Number(algo))   {\n        case MazeGenAlgorithms.BACKTRACKING:\n          return dfsMazeGenerator(startCoord, endCoord);\n        case MazeGenAlgorithms.SIDEWINDER:\n          return sidewinderMazeGenerator(startCoord, endCoord);\n        case MazeGenAlgorithms.TREE:\n          return treeMazeGenerator(startCoord, endCoord);\n        default:\n          return dfsMazeGenerator(startCoord, endCoord);\n      }\n    });\n  };\n\n  const addRandomWalls = (amount: number): void => {\n    setGrid((g) => {\n      return produce(g, (copy) => {\n        let randX, randY;\n        for (let i = 0; i < amount; i++) {\n          randX = randomInteger(0, grid.length - 1);\n          randY = randomInteger(0, grid[0].length - 1);\n          if(copy[randX][randY].type != CellType.START && copy[randX][randY].type != CellType.END)\n            copy[randX][randY].type = CellType.WALL;\n        }\n      });\n    });\n  };\n\n  const generateIMG = async () => {\n    html2canvas(document.querySelector(\"#capture\")! as HTMLElement).then(\n      (canvas) => {\n        canvas.toBlob(\n          (b) => {\n              var link = document.createElement(\"a\");\n              link.href = URL.createObjectURL(b);\n              link.download = \"screenshot\";\n\n              //Firefox requires the link to be in the body\n              document.body.appendChild(link);\n    \n              //simulate click\n              link.click();\n    \n              //remove the link when done\n              document.body.removeChild(link);\n              console.log(\"download\");\n            },\n            \"image/jpeg\",\n            1\n          );\n         \n      }\n    );\n  };\n\n  return (\n    <>\n      <Header\n        onStart={start}\n        resetAnimation={resetAnimation}\n        resetAll={resetAll}\n        randomWalls={addRandomWalls}\n        generateMaze={generateMaze}\n        generateIMG={generateIMG}\n      />\n      <span className=\"time-row\">\n        <p>Time: {algoTime}ms</p>\n      </span>\n      <div className=\"container\" id=\"capture\">\n        <div\n          className=\"grid\"\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${H_CELLS_NUM.toFixed(\n              0\n            )}, ${SQUARE_WIDTH}px)`,\n          }}\n        >\n          {grid.map((row, i) => {\n            return row.map((col, j) => {\n              return (\n                <Node\n                  key={`${i}-${j}`}\n                  row={i}\n                  col={j}\n                  type={col.type}\n                  mouseDown={() => {\n                    if (!isAnimating) {\n                      if (col.type === CellType.START) {\n                        setIsDraggingStart(true);\n                      } else if (col.type == CellType.END) {\n                        setIsDraggingEnd(true);\n                      } else {\n                        setIsDraggingWall(true);\n                        setGrid((g) => {\n                          return produce(g, (copy) => {\n                            if (copy[i][j].type === CellType.EMPTY) {\n                              copy[i][j].type = CellType.WALL;\n                            } else if (copy[i][j].type === CellType.WALL) {\n                              copy[i][j].type = CellType.EMPTY;\n                            }\n                          });\n                        });\n                      }\n                    }\n                  }}\n                  mouseEnter={() => {\n                    if (!isAnimating) {\n                      if (isDraggingStart) {\n                        setGrid((g) => {\n                          return produce(g, (copy) => {\n                            copy[startCoord.r][startCoord.c].type =\n                              CellType.EMPTY;\n                            copy[i][j].type = CellType.START;\n                          });\n                        });\n                        setStartCoord({ r: i, c: j });\n                      } else if (isDraggingEnd) {\n                        setGrid((g) => {\n                          return produce(g, (copy) => {\n                            copy[endCoord.r][endCoord.c].type = CellType.EMPTY;\n                            copy[i][j].type = CellType.END;\n                          });\n                        });\n                        setEndCoord({ r: i, c: j });\n                      } else if (isDraggingWall) {\n                        setGrid((g) => {\n                          return produce(g, (copy) => {\n                            if (copy[i][j].type === CellType.EMPTY) {\n                              copy[i][j].type = CellType.WALL;\n                            } else if (copy[i][j].type === CellType.WALL) {\n                              copy[i][j].type = CellType.EMPTY;\n                            }\n                          });\n                        });\n                      }\n                    }\n                  }}\n                />\n              );\n            });\n          })}\n        </div>\n      </div>\n      <div className=\"version-row\">\n        <p>Version: {version}</p>\n      </div>\n    </>\n  );\n};\n","import {\n  GridNode,\n  Coordinate,\n  AlgorithmResult,\n  CellType,\n} from \"../components/Node/node_data\";\nimport { getAdjNodes } from \"./common\";\n\nexport function iterativeDFS(\n  grid: Array<Array<GridNode>>,\n  start: Coordinate,\n  end: Coordinate\n): AlgorithmResult {\n  var stack = Array<Coordinate>(); //stack of visited nodes\n  var visited = Array<Coordinate>();\n  var orderOfVisit = Array<Coordinate>();\n  var parents = Array<Array<Coordinate>>();\n  var found = false;\n\n  //init parents matrix\n  for (let i = 0; i < grid.length; i++) {\n    let tmp = Array<Coordinate>();\n    for (let j = 0; j < grid[0].length; j++) {\n      tmp.push({ r: -1, c: -1 });\n    }\n    parents.push(tmp);\n  }\n\n  var currentNode = { r: start.r, c: start.c };\n  stack.push(currentNode);\n  while (!found && stack.length) {\n    currentNode = stack.pop()!;\n    //if the node is not visited\n    orderOfVisit.push(currentNode);\n    if (!visited.some((n) => n.r === currentNode.r && n.c === currentNode.c)) {\n      visited.push(currentNode);\n    }\n    let adjs = getAdjNodes(grid, currentNode);\n    for (let i = 0; i < adjs.length; i++) {\n      if (!visited.some((n) => n.r === adjs[i].r && n.c === adjs[i].c)) {\n        parents[adjs[i].r][adjs[i].c] = currentNode;\n        stack.push(adjs[i]);\n      }\n    }\n    if (currentNode.r === end.r && currentNode.c === end.c) {\n      found = true;\n    }\n  }\n\n  if (!found) {\n    return {\n      orderOfVisit: orderOfVisit,\n      shortestPath: [],\n    };\n  }\n\n  var shortestPath = Array<Coordinate>();\n  //build shortest path array\n  currentNode = end;\n  while (currentNode.r != start.r || currentNode.c != start.c) {\n    shortestPath.push(currentNode);\n    currentNode = parents[currentNode.r][currentNode.c];\n  }\n  shortestPath.reverse();\n  return {\n    orderOfVisit: orderOfVisit,\n    shortestPath: shortestPath,\n  };\n}\n","import { AlgorithmResult, CellType, Coordinate, GridNode } from \"../components/Node/node_data\";\nimport { gridDirections } from \"../utils\";\n\nexport default function dijkstra(\n  grid: Array<Array<GridNode>>,\n  start: Coordinate,\n  end: Coordinate\n): AlgorithmResult {\n  var nodesToVisit = Array<Coordinate>();\n  var shortestPath = Array<Coordinate>();\n  var orderOfExamination = Array<Coordinate>();\n  var discoveredNodes = Array<Coordinate>();\n  var parents = Array<Array<Coordinate>>();\n  var dist = Array<Array<number>>();\n  var found = false;\n\n  //initialize dist matrix\n  for (var i = 0; i < grid.length; i++) {\n    var tmp = Array<number>();\n    var tmp2 = Array<Coordinate>();\n    for (var j = 0; j < grid[0].length; j++) {\n      tmp2.push({ r: -1, c: -1 });\n      tmp.push(Infinity);\n    }\n    parents.push(tmp2);\n    dist.push(tmp);\n  }\n  parents[start.r][start.c] = { r: 0, c: 0 };\n  dist[start.r][start.c] = 0;\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      nodesToVisit.push({ r: grid[i][j].row, c: grid[i][j].col });\n    }\n  }\n\n  var currentNode: Coordinate = { r: start.r, c: start.c };\n  while (!found && nodesToVisit.length) {\n    //sort remaining nodes by distance\n    nodesToVisit.sort((a, b) => dist[a.r][a.c] - dist[b.r][b.c]);\n    const closest = nodesToVisit.shift()!;\n\n    //hit a wall\n    if (grid[closest?.r][closest?.c].type === CellType.WALL) {\n      continue;\n    }\n\n    //trapped\n    if (dist[closest.r][closest.c] === Infinity) {\n      return {\n        orderOfVisit: orderOfExamination,\n        shortestPath: [],\n      };\n    }\n\n    //all good\n    //register visit\n    orderOfExamination.push(closest);\n    //did we find the end?\n    if (closest.r === end.r && closest.c === end.c) {\n      found = true;\n    }\n\n    //get available neighbours\n    let neighbours = [];\n    for (let i = 0; i < gridDirections.length; i++) {\n      let candidate = {       \n        r: closest.r + gridDirections[i].r,\n        c: closest.c + gridDirections[i].c,\n      };\n      if(        \n        candidate.r >= 0 &&\n        candidate.r < grid.length &&\n        candidate.c >= 0 &&\n        candidate.c < grid[0].length &&\n        !orderOfExamination.some(n => n.r === candidate.r && n.c === candidate.c)) {\n          neighbours.push(candidate);\n      }\n    }\n\n    //iterate the neighbours\n    for (const neighbor of neighbours) {\n      dist[neighbor.r][neighbor.c] = dist[closest.r][closest.c] + 1;\n      parents[neighbor.r][neighbor.c] = closest;\n    }\n\n  }\n  //calculate shortest path from end to start\n  currentNode.c = end.c;\n  currentNode.r = end.r;\n  while       (currentNode.c != start.c || currentNode.r != start.r)       {\n    shortestPath.push(currentNode);\n    currentNode = parents[currentNode.r][currentNode.c];\n  }\n  shortestPath = shortestPath.reverse();\n  return {\n    orderOfVisit: orderOfExamination,\n    shortestPath: shortestPath,\n  };\n}","import {\n  AlgorithmResult,\n  Coordinate,\n  GridNode,\n} from \"../components/Node/node_data\";\nimport { getAdjNodes } from \"./common\";\n\nexport default function BFS(\n  grid: Array<Array<GridNode>>,\n  start: Coordinate,\n  end: Coordinate\n): AlgorithmResult {\n  var queue = Array<Coordinate>();\n  var orderOfVisit = Array<Coordinate>();\n  var dist = Array<Array<number>>();\n  var parents = Array<Array<Coordinate>>();\n  var visited = Array<Array<boolean>>();\n  var current;\n  var found = false;\n\n  for (let i = 0; i < grid.length; i++) {\n    let tmp = Array<Coordinate>();\n    let tmpDist = Array<number>();\n    let tmpVis = Array<boolean>();\n    for (let j = 0; j < grid[0].length; j++) {\n      tmp.push({ r: -1, c: -1 });\n      tmpDist.push(Infinity);\n      tmpVis.push(false);\n    }\n    parents.push(tmp);\n    dist.push(tmpDist);\n    visited.push(tmpVis);\n  }\n\n  dist[start.r][start.c] = 0;\n  visited[start.r][start.c] = true;\n  queue.push(start);\n\n  while (!found && queue.length) {\n    current = queue.shift()!;\n    visited[current.r][current.c] = true;\n    if (current.r === end.r && current.c === end.c) {\n      found = true;\n    }\n    orderOfVisit.push(current);\n    let neighbours = getAdjNodes(grid, current);\n    for (const neighbor of neighbours) {\n      //if not visited yet\n      if (!visited[neighbor.r][neighbor.c]) {\n        dist[neighbor.r][neighbor.c] = dist[current.r][current.c] + 1;\n        parents[neighbor.r][neighbor.c] = current;\n        visited[neighbor.r][neighbor.c] = true;\n        queue.push(neighbor);\n\n        if (neighbor.r === end.r && neighbor.c === end.c) {\n          found = true;\n        }\n      }\n    }\n  }\n  if (!found) {\n    return {\n      orderOfVisit: orderOfVisit,\n      shortestPath: [],\n    };\n  }\n\n  current = end;\n  var shortestPath = Array<Coordinate>();\n  while (current.r != start.r || current.c != start.c) {\n    shortestPath.push(current);\n    current = parents[current.r][current.c];\n  }\n  shortestPath.reverse();\n  return {\n    orderOfVisit: orderOfVisit,\n    shortestPath: shortestPath,\n  };\n}\n","import {\n  AlgorithmResult,\n  Coordinate,\n  GridNode,\n} from \"../components/Node/node_data\";\nimport { calculateHeuristic, Euristic } from \"./heuristics\";\nimport { compareNodes, getAdjNodes } from \"./common\";\n\nexport default function AStar(\n  grid: Array<Array<GridNode>>,\n  start: Coordinate,\n  end: Coordinate,\n  euristic: Euristic\n): AlgorithmResult {\n  var orderOfVisit = Array<Coordinate>();\n  var openList = Array<Coordinate>();\n  var closedList = Array<Coordinate>();\n  var found = false;\n  let nodes = Array<Array<AStarNode>>();\n  let dist = Array<Array<number>>();\n\n  //init nodes matrix\n  for (let i = 0; i < grid.length; i++) {\n    let tmp = [];\n    let tmpDist = [];\n    for (let j = 0; j < grid[0].length; j++) {\n      tmpDist.push(Infinity);\n      tmp.push({\n        r: i,\n        c: j,\n        g: Infinity,\n        f: Infinity,\n        h: Infinity,\n        parent: null,\n      });\n    }\n    nodes.push(tmp);\n    dist.push(tmpDist);\n  }\n  \n  dist[start.r][start.c] = 0;\n\n  nodes[start.r][start.c].g = 0;\n  nodes[start.r][start.c].h = calculateHeuristic(euristic, start, end);\n  nodes[start.r][start.c].f = nodes[start.r][start.c].g + nodes[start.r][start.c].h;\n\n  openList.push(start);\n\n  while (!found && openList.length) {\n    //get the node with the lowest f score from the open list\n    openList.sort((a, b) => nodes[a.r][a.c].f - nodes[b.r][b.c].f);\n    let coord = openList.shift()!;\n    let current = nodes[coord.r][coord.c];\n    if(compareNodes(current, end)){\n      found = true;\n      break;\n    }\n    orderOfVisit.push({r: current.r, c: current.c});\n    closedList.push(current);\n\n    //analyze the neighbours\n    let adjs = getAdjNodes(grid, current);\n    for(const neigbor of adjs){\n      //check if is in the closed set\n      if(closedList.some(el => compareNodes(el, neigbor))){\n        continue;\n      }\n      let tentative_g_score = current.g + 1; // the dist between one node to the neighbor is always 1 since it is a grid\n      if(!openList.some(el => compareNodes(el, neigbor)) || tentative_g_score < nodes[neigbor.r][neigbor.c].g){\n        nodes[neigbor.r][neigbor.c].parent = current;\n        nodes[neigbor.r][neigbor.c].g = tentative_g_score;\n        nodes[neigbor.r][neigbor.c].f = nodes[neigbor.r][neigbor.c].g + calculateHeuristic(euristic, neigbor, end);\n        if(!openList.some(el => compareNodes(el, neigbor))){\n          openList.push(neigbor);\n        }\n      }\n    }\n  }\n\n  if (!found) {\n    return {\n      orderOfVisit: orderOfVisit,\n      shortestPath: [],\n    };\n  }\n  let current = end;\n  var shortestPath = Array<Coordinate>();\n  while (current.r != start.r || current.c != start.c) {\n    shortestPath.push(current);\n    current = nodes[current.r][current.c].parent!;\n  }\n  shortestPath.reverse();\n  return {\n    orderOfVisit: orderOfVisit,\n    shortestPath: shortestPath,\n  };\n}\n\ninterface AStarNode {\n  r: number;\n  c: number;\n  f: number;\n  g: number;\n  h: number;\n  parent: Coordinate | null;\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Grid } from \"./components/Grid/Grid.component\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}